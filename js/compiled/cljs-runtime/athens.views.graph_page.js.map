{"version":3,"sources":["athens/views/graph_page.cljs"],"mappings":";;AAWA,AAAA,AAAMA;AAAN,AAEE,AAAMC,AAAmB,AAAAC,AAAA,AAAA;AAAAC,AAAA,AAAAC,AAGME;AAHN,AAAA,AAAAJ,AAAAC,AAAAD,AAAAC,AAACE,AAAAA,AAAAA;;AAIpBE,AAAmB,AAAAC,AAAA,AAAA;AAAAC,AAAA,AAAAL,AAIME;AAJN,AAAA,AAAAE,AAAAC,AAAAD,AAAAC,AAACJ,AAAAA,AAAAA;;AAKpBK,AAAmB,AAACC,AAAe,AAACC,AAAIX,AAAW,AAACW,AAAIL;AACxDA,AAAmB,AAAAM,AAAA,AAAA;AAAAC,AAAA,AAAAV,AAKME;AALNS,AAKcR;AALd,AAAA,AAAAM,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAACV,AAAAA,AAAAA;;AAMpBK,AAAmB,AAAAM,AAAA,AAAA;AAAAC,AAAA,AAAAb,AAKME;AALNY,AAKcR;AALd,AAAA,AAAAM,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAACb,AAAAA,AAAAA;;AAMpBJ,AAAmB,AAACkB,AAAI,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAME;AAAN,AAAAD,AAAAD,AAAA,AAAA,AAAQG;AAAR,AAAAF,AAAAD,AAAA,AAAA,AAAUI;AAAV,AAAA,AAAA,AAAA,AAAA,AACUF,AACAC,AACAC;AACV,AAACC,AAAOnB,AAAgBG;AA1BtD,AA2BET;;AAGJ,AAAA,AAAM0B;AAAN,AAOO,AAACR,AAAI,AAAAW;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAR,AAAAS,AAAA,AAAA,AAAMC;AAAN,AAAAV,AAAAS,AAAA,AAAA,AAAeE;AAAf,AAAA,AAAA,AAAA,AACY,AAAA,AAAA,AAAA,AAAIA,AACAC,AACAC,AAEJH;AAVjB,AAAAJ,AAAA,AAAA;AAAAC,AAAA,AAAAzB,AAIME;AAJN,AAAA,AAAAsB,AAAAC,AAAAD,AAAAC,AAACxB,AAAAA,AAAAA;;;AAaR,AAAA,AAAM+B;AAAN,AAEE;AAAA,AACE,AAAA,AAAAhC,AAAMiC,AAAO,AAAA,AAAA,AAACC;AACRC,AAAM,AAACvC;AACPwC,AAAM,AAACb;AACPc,AAAM,AAAIJ,AAAMK,AACNC;AAJhB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAMMC,AACwBL,AACAC,AAKR,AAAA,AAAQ,AAAcK,AACtB,AAAA,AAAQ,AAAeA,AACvB;AAAA,AAAO,AAAA,AAAeJ;AAf5C,AAgBsB,AAASK,AAASC,AAAIC;AAAtB,AACE,AAAMC,AAAa,AAAIH;AACjBrB,AAAa,AAAIqB;AACjBI,AAAa,AAAIJ;AACjBK,AAAa,AAAIL;AAHvB,AAIMM;AACAC,AAAa,AAAAC,AAAA;AAAAC,AAAY,AAACC,AAAa/B,AACd,AAAGuB,AACH,AAAGI;AAFf,AAAA,AAAAE,AAAAC,AAAAD,AAAAC;;AAGbE,AAAa,AAAA,AAAIV,AAAiBE;AAClCS,AAAiB,AAACF,AAAa/B,AACd,AAAGuB,AACH,AAAGI;AAX1B,AAYE,AAAM,AAAQL,AAAK,AAAA,AAAKM;;AACxB,AAAM,AAAaN,AAAK,AAAA,AAAoBN;;AAC5C,AAAWM,AAAIE,AACJ,AAAGC,AAAE,AAAA,AAAGO,AACR,AAAGN,AAAEO;;AAChB,AAAYX;;AAEZ,AAAA,AAAMA,AAAIG,AAAEC,AAAEO,AAAS,AAAA,AAAGC;;AAC1B,AAAM,AAAaZ,AAAK,AAAA,AAAaN;;AACrC,AAAOM","names":["athens.views.graph-page/build-nodes","all-nodes","G__64113","G__64114","cljs.core/deref","datascript.core/q","athens.db/dsdb","nodes-with-refs","G__64115","G__64116","nodes-without-refs","clojure.set.difference","cljs.core/set","G__64117","G__64118","G__64119","G__64120","G__64121","G__64122","cljs.core.map","p__64123","vec__64124","cljs.core.nth","e","t","val","cljs.core.concat","athens.views.graph-page/build-links","G__64131","G__64132","p__64127","vec__64128","node-eid","ref","athens.db/get-parents-recursively","cljs.core/first","athens.views.graph-page/graph-page","dark?","re_frame.core.subscribe","nodes","links","theme","athens.style/THEME-DARK","athens.style/THEME-LIGHT","js/module$node_modules$react_force_graph$dist$react_force_graph_common.ForceGraph2D","js/window","node","ctx","global-scale","label","x","y","scale-factor","font-size","x__4214__auto__","y__4215__auto__","js/Math.sqrt","text-width","radius","js/Math.PI"],"sourcesContent":["^:cljstyle/ignore\n(ns athens.views.graph-page\n  (:require\n    [\"react-force-graph\" :as rfg]\n    [athens.db :as db]\n    [athens.style :as styles]\n    [clojure.set :as set]\n    [datascript.core :as d]\n    [re-frame.core :as rf]))\n\n\n(defn build-nodes\n  []\n  (let [all-nodes          (d/q '[:find [?e ...]\n                                  :where\n                                  [?e :node/title _]]\n                                @db/dsdb)\n        nodes-with-refs    (d/q '[:find [?e ...]\n                                  :where\n                                  [?e :node/title _]\n                                  [_ :block/refs ?e]]\n                                @db/dsdb)\n        nodes-without-refs (set/difference (set all-nodes) (set nodes-with-refs))\n        nodes-with-refs    (d/q '[:find ?e ?t (count ?r)\n                                  :in $ [?e ...]\n                                  :where\n                                  [?e :node/title ?t]\n                                  [?r :block/refs ?e]]\n                                @db/dsdb nodes-with-refs)\n        nodes-without-refs (d/q '[:find ?e ?t ?c\n                                  :in $ [?e ...]\n                                  :where\n                                  [?e :node/title ?t]\n                                  [(get-else $ ?e :always-nil-value 1) ?c]]\n                                @db/dsdb nodes-without-refs)\n        all-nodes          (map (fn [[e t val]]\n                                  {\"id\"   e\n                                   \"name\" t\n                                   \"val\"  val})\n                                (concat nodes-with-refs nodes-without-refs))]\n    all-nodes))\n\n\n(defn build-links\n  []\n  (->> (d/q '[:find ?e ?r\n              :where\n              [?e :node/title ?t]\n              [?r :block/refs ?e]]\n            @db/dsdb)\n       (map (fn [[node-eid ref]]\n              {\"source\" (-> ref\n                            db/get-parents-recursively\n                            first\n                            :db/id)\n               \"target\" node-eid}))))\n\n\n(defn graph-page\n  []\n  (fn []\n    (let [dark? @(rf/subscribe [:theme/dark])\n          nodes (build-nodes)\n          links (build-links)\n          theme (if dark? styles/THEME-DARK\n                    styles/THEME-LIGHT)]\n\n      [:> rfg/ForceGraph2D\n       {:graphData        {:nodes nodes\n                           :links links}\n        ;; example data\n        #_{:nodes [{\"id\" \"foo\", \"name\" \"name1\", \"val\" 1}\n                   {\"id\" \"bar\", \"name\" \"name2\", \"val\" 10}]\n           :links [{\"source\" \"foo\", \"target\" \"bar\"}]}\n        :width            (* 0.95 (.-innerWidth js/window))\n        :height           (* 0.95 (.-innerHeight js/window))\n        :linkColor        (fn [] (:border-color theme))\n        :nodeCanvasObject (fn [^js node ^js ctx global-scale]\n                            (let [label        (.. node -name)\n                                  val          (.. node -val)\n                                  x            (.. node -x)\n                                  y            (.. node -y)\n                                  scale-factor 4\n                                  font-size    (max 10 (-> (js/Math.sqrt val)\n                                                           (/ global-scale)\n                                                           (* scale-factor)))\n                                  text-width   (.. ctx (measureText label) -width)\n                                  radius       (-> (js/Math.sqrt val)\n                                                   (/ global-scale)\n                                                   (* scale-factor))]\n                              (set! (.-font ctx) (str font-size \"px IBM Plex Sans, Sans-Serif\"))\n                              (set! (.-fillStyle ctx) (:header-text-color theme))\n                              (.fillText ctx label\n                                         (- x (/ text-width 2))\n                                         (- y radius))\n                              (.beginPath ctx)\n                              ;; https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc\n                              (.arc ctx x y radius 0 (* js/Math.PI 2))\n                              (set! (.-fillStyle ctx) (:link-color theme))\n                              (.fill ctx)))}])))\n"]}