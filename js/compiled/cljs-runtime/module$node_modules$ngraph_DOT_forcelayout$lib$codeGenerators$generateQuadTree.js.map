{
"version":3,
"file":"module$node_modules$ngraph_DOT_forcelayout$lib$codeGenerators$generateQuadTree.js",
"lineCount":17,
"mappings":"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",
"sources":["node_modules/ngraph_DOT_forcelayout/lib/codeGenerators/generateQuadTree.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ngraph_DOT_forcelayout$lib$codeGenerators$generateQuadTree\"] = function(global,require,module,exports) {\nconst createPatternBuilder = require('./createPatternBuilder');\nconst getVariableName = require('./getVariableName');\n\nmodule.exports = generateQuadTreeFunction;\nmodule.exports.generateQuadTreeFunctionBody = generateQuadTreeFunctionBody;\n\nfunction generateQuadTreeFunction(dimension) {\n  let code = generateQuadTreeFunctionBody(dimension);\n  return (new Function(code))();\n}\n\nfunction generateQuadTreeFunctionBody(dimension) {\n  let pattern = createPatternBuilder(dimension);\n  let quadCount = Math.pow(2, dimension);\n\n  let code = `\n${getInsertStackCode()}\n${getQuadNodeCode(dimension)}\n\nfunction createQuadTree(options, random) {\n  options = options || {};\n  options.gravity = typeof options.gravity === 'number' ? options.gravity : -1;\n  options.theta = typeof options.theta === 'number' ? options.theta : 0.8;\n\n  var gravity = options.gravity;\n  var updateQueue = [];\n  var insertStack = new InsertStack();\n  var theta = options.theta;\n\n  var nodesCache = [];\n  var currentInCache = 0;\n  var root = newNode();\n\n  return {\n    insertBodies: insertBodies,\n\n    /**\n     * Gets root node if it is present\n     */\n    getRoot: function() {\n      return root;\n    },\n\n    updateBodyForce: update,\n\n    options: function(newOptions) {\n      if (newOptions) {\n        if (typeof newOptions.gravity === 'number') {\n          gravity = newOptions.gravity;\n        }\n        if (typeof newOptions.theta === 'number') {\n          theta = newOptions.theta;\n        }\n\n        return this;\n      }\n\n      return {\n        gravity: gravity,\n        theta: theta\n      };\n    }\n  };\n\n  function newNode() {\n    // To avoid pressure on GC we reuse nodes.\n    var node = nodesCache[currentInCache];\n    if (node) {\n${assignQuads('      node.')}\n      node.body = null;\n      node.mass = ${pattern('node.mass_{var} = ', {join: ''})}0;\n      ${pattern('node.min_{var} = node.max_{var} = ', {join: ''})}0;\n    } else {\n      node = new QuadNode();\n      nodesCache[currentInCache] = node;\n    }\n\n    ++currentInCache;\n    return node;\n  }\n\n  function update(sourceBody) {\n    var queue = updateQueue;\n    var v;\n    ${pattern('var d{var};', {indent: 4})}\n    var r; \n    ${pattern('var f{var} = 0;', {indent: 4})}\n    var queueLength = 1;\n    var shiftIdx = 0;\n    var pushIdx = 1;\n\n    queue[0] = root;\n\n    while (queueLength) {\n      var node = queue[shiftIdx];\n      var body = node.body;\n\n      queueLength -= 1;\n      shiftIdx += 1;\n      var differentBody = (body !== sourceBody);\n      if (body && differentBody) {\n        // If the current node is a leaf node (and it is not source body),\n        // calculate the force exerted by the current node on body, and add this\n        // amount to body's net force.\n        ${pattern('d{var} = body.pos.{var} - sourceBody.pos.{var};', {indent: 8})}\n        r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n\n        if (r === 0) {\n          // Poor man's protection against zero distance.\n          ${pattern('d{var} = (random.nextDouble() - 0.5) / 50;', {indent: 10})}\n          r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n        }\n\n        // This is standard gravitation force calculation but we divide\n        // by r^3 to save two operations when normalizing force vector.\n        v = gravity * body.mass * sourceBody.mass / (r * r * r);\n        ${pattern('f{var} += v * d{var};', {indent: 8})}\n      } else if (differentBody) {\n        // Otherwise, calculate the ratio s / r,  where s is the width of the region\n        // represented by the internal node, and r is the distance between the body\n        // and the node's center-of-mass\n        ${pattern('d{var} = node.mass_{var} / node.mass - sourceBody.pos.{var};', {indent: 8})}\n        r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n\n        if (r === 0) {\n          // Sorry about code duplication. I don't want to create many functions\n          // right away. Just want to see performance first.\n          ${pattern('d{var} = (random.nextDouble() - 0.5) / 50;', {indent: 10})}\n          r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n        }\n        // If s / r < \u03b8, treat this internal node as a single body, and calculate the\n        // force it exerts on sourceBody, and add this amount to sourceBody's net force.\n        if ((node.max_${getVariableName(0)} - node.min_${getVariableName(0)}) / r < theta) {\n          // in the if statement above we consider node's width only\n          // because the region was made into square during tree creation.\n          // Thus there is no difference between using width or height.\n          v = gravity * node.mass * sourceBody.mass / (r * r * r);\n          ${pattern('f{var} += v * d{var};', {indent: 10})}\n        } else {\n          // Otherwise, run the procedure recursively on each of the current node's children.\n\n          // I intentionally unfolded this loop, to save several CPU cycles.\n${runRecursiveOnChildren()}\n        }\n      }\n    }\n\n    ${pattern('sourceBody.force.{var} += f{var};', {indent: 4})}\n  }\n\n  function insertBodies(bodies) {\n    ${pattern('var {var}min = Number.MAX_VALUE;', {indent: 4})}\n    ${pattern('var {var}max = Number.MIN_VALUE;', {indent: 4})}\n    var i = bodies.length;\n\n    // To reduce quad tree depth we are looking for exact bounding box of all particles.\n    while (i--) {\n      var pos = bodies[i].pos;\n      ${pattern('if (pos.{var} < {var}min) {var}min = pos.{var};', {indent: 6})}\n      ${pattern('if (pos.{var} > {var}max) {var}max = pos.{var};', {indent: 6})}\n    }\n\n    // Makes the bounds square.\n    var maxSideLength = -Infinity;\n    ${pattern('if ({var}max - {var}min > maxSideLength) maxSideLength = {var}max - {var}min ;', {indent: 4})}\n\n    currentInCache = 0;\n    root = newNode();\n    ${pattern('root.min_{var} = {var}min;', {indent: 4})}\n    ${pattern('root.max_{var} = {var}min + maxSideLength;', {indent: 4})}\n\n    i = bodies.length - 1;\n    if (i >= 0) {\n      root.body = bodies[i];\n    }\n    while (i--) {\n      insert(bodies[i], root);\n    }\n  }\n\n  function insert(newBody) {\n    insertStack.reset();\n    insertStack.push(root, newBody);\n\n    while (!insertStack.isEmpty()) {\n      var stackItem = insertStack.pop();\n      var node = stackItem.node;\n      var body = stackItem.body;\n\n      if (!node.body) {\n        // This is internal node. Update the total mass of the node and center-of-mass.\n        ${pattern('var {var} = body.pos.{var};', {indent: 8})}\n        node.mass += body.mass;\n        ${pattern('node.mass_{var} += body.mass * {var};', {indent: 8})}\n\n        // Recursively insert the body in the appropriate quadrant.\n        // But first find the appropriate quadrant.\n        var quadIdx = 0; // Assume we are in the 0's quad.\n        ${pattern('var min_{var} = node.min_{var};', {indent: 8})}\n        ${pattern('var max_{var} = (min_{var} + node.max_{var}) / 2;', {indent: 8})}\n\n${assignInsertionQuadIndex(8)}\n\n        var child = getChild(node, quadIdx);\n\n        if (!child) {\n          // The node is internal but this quadrant is not taken. Add\n          // subnode to it.\n          child = newNode();\n          ${pattern('child.min_{var} = min_{var};', {indent: 10})}\n          ${pattern('child.max_{var} = max_{var};', {indent: 10})}\n          child.body = body;\n\n          setChild(node, quadIdx, child);\n        } else {\n          // continue searching in this quadrant.\n          insertStack.push(child, body);\n        }\n      } else {\n        // We are trying to add to the leaf node.\n        // We have to convert current leaf into internal node\n        // and continue adding two nodes.\n        var oldBody = node.body;\n        node.body = null; // internal nodes do not cary bodies\n\n        if (isSamePosition(oldBody.pos, body.pos)) {\n          // Prevent infinite subdivision by bumping one node\n          // anywhere in this quadrant\n          var retriesCount = 3;\n          do {\n            var offset = random.nextDouble();\n            ${pattern('var d{var} = (node.max_{var} - node.min_{var}) * offset;', {indent: 12})}\n\n            ${pattern('oldBody.pos.{var} = node.min_{var} + d{var};', {indent: 12})}\n            retriesCount -= 1;\n            // Make sure we don't bump it out of the box. If we do, next iteration should fix it\n          } while (retriesCount > 0 && isSamePosition(oldBody.pos, body.pos));\n\n          if (retriesCount === 0 && isSamePosition(oldBody.pos, body.pos)) {\n            // This is very bad, we ran out of precision.\n            // if we do not return from the method we'll get into\n            // infinite loop here. So we sacrifice correctness of layout, and keep the app running\n            // Next layout iteration should get larger bounding box in the first step and fix this\n            return;\n          }\n        }\n        // Next iteration should subdivide node further.\n        insertStack.push(node, oldBody);\n        insertStack.push(node, body);\n      }\n    }\n  }\n}\n\nfunction getChild(node, idx) {\n${getChildBody()}\n  return null;\n}\n\nfunction setChild(node, idx, child) {\n${setChildBody()}\n}\n\nfunction isSamePosition(point1, point2) {\n  ${pattern('var d{var} = Math.abs(point1.{var} - point2.{var});', {indent: 2})}\n\n  return ${pattern('d{var} < 1e-8', {join: ' && '})};\n}\n\nreturn createQuadTree;\n\n`\n  return code;\n\n  function getChildBody() {\n    let code = [];\n    for (let i = 0; i < quadCount; ++i) {\n      code.push(`  if (idx === ${i}) return node.quad${i};`);\n    }\n\n    return code.join('\\n');\n    // if (idx === 0) return node.quad0;\n    // if (idx === 1) return node.quad1;\n    // if (idx === 2) return node.quad2;\n    // if (idx === 3) return node.quad3;\n  }\n\n  function setChildBody() {\n    let code = [];\n    for (let i = 0; i < quadCount; ++i) {\n      let prefix = (i === 0) ? '  ' : '  else ';\n      code.push(`${prefix}if (idx === ${i}) node.quad${i} = child;`);\n    }\n\n    return code.join('\\n');\n    // if (idx === 0) node.quad0 = child;\n    // else if (idx === 1) node.quad1 = child;\n    // else if (idx === 2) node.quad2 = child;\n    // else if (idx === 3) node.quad3 = child;\n  }\n\n  function assignInsertionQuadIndex(indentCount) {\n    let code = [];\n    let indent = Array(indentCount + 1).join(' ');\n    for (let i = 0; i < dimension; ++i) {\n      code.push(indent + `if (${getVariableName(i)} > max_${getVariableName(i)}) {`)\n      code.push(indent + `  quadIdx = quadIdx + ${Math.pow(2, i)};`);\n      code.push(indent + `  min_${getVariableName(i)} = max_${getVariableName(i)};`);\n      code.push(indent + `  max_${getVariableName(i)} = node.max_${getVariableName(i)};`);\n      code.push(indent + `}`)\n    }\n    return code.join('\\n');\n    // if (x > max_x) { // somewhere in the eastern part.\n    //   quadIdx = quadIdx + 1;\n    //   left = right;\n    //   right = node.right;\n    // }\n  }\n\n  function runRecursiveOnChildren() {\n    let indent = Array(11).join(' ');\n    let code = [];\n    for (let i = 0; i < quadCount; ++i) {\n      code.push(indent + `if (node.quad${i}) {`)\n      code.push(indent + `  queue[pushIdx] = node.quad${i};`)\n      code.push(indent + `  queueLength += 1;`)\n      code.push(indent + `  pushIdx += 1;`)\n      code.push(indent + `}`)\n    }\n    return code.join('\\n');\n    // if (node.quad0) {\n    //   queue[pushIdx] = node.quad0;\n    //   queueLength += 1;\n    //   pushIdx += 1;\n    // }\n  }\n\n\n  function getQuadNodeCode(dimension) {\n    let code = `\nfunction QuadNode() {\n  // body stored inside this node. In quad tree only leaf nodes (by construction)\n  // contain bodies:\n  this.body = null;\n\n  // Child nodes are stored in quads. Each quad is presented by number:\n  // 0 | 1\n  // -----\n  // 2 | 3\n${assignQuads('  this.')}\n\n  // Total mass of current node\n  this.mass = 0;\n\n  // Center of mass coordinates\n  ${pattern('this.mass_{var} = 0;', {indent: 2})}\n\n  // bounding box coordinates\n  ${pattern('this.min_{var} = 0;', {indent: 2})}\n  ${pattern('this.max_{var} = 0;', {indent: 2})}\n}\n`\n    return code;\n  }\n\n  function assignQuads(indent) {\n    // this.quad0 = null;\n    // this.quad1 = null;\n    // this.quad2 = null;\n    // this.quad3 = null;\n    let quads = [];\n    for (let i = 0; i < quadCount; ++i) {\n      quads.push(`${indent}quad${i} = null;`)\n    }\n    return quads.join('\\n')\n  }\n}\n\n\nfunction getInsertStackCode() {\n  return `\n/**\n * Our implementation of QuadTree is non-recursive to avoid GC hit\n * This data structure represent stack of elements\n * which we are trying to insert into quad tree.\n */\nfunction InsertStack () {\n    this.stack = [];\n    this.popIdx = 0;\n}\n\nInsertStack.prototype = {\n    isEmpty: function() {\n        return this.popIdx === 0;\n    },\n    push: function (node, body) {\n        var item = this.stack[this.popIdx];\n        if (!item) {\n            // we are trying to avoid memory pressure: create new element\n            // only when absolutely necessary\n            this.stack[this.popIdx] = new InsertStackElement(node, body);\n        } else {\n            item.node = node;\n            item.body = body;\n        }\n        ++this.popIdx;\n    },\n    pop: function () {\n        if (this.popIdx > 0) {\n            return this.stack[--this.popIdx];\n        }\n    },\n    reset: function () {\n        this.popIdx = 0;\n    }\n};\n\nfunction InsertStackElement(node, body) {\n    this.node = node; // QuadTree node\n    this.body = body; // physical body which needs to be inserted to node\n}\n`\n}\n};"],
"names":["shadow$provide","global","require","module","exports","generateQuadTreeFunctionBody","dimension","assignQuads","indent","quads","i","quadCount","push","join","pattern","createPatternBuilder","Math","pow","getVariableName","runRecursiveOnChildren","Array","code","assignInsertionQuadIndex","indentCount","getChildBody","setChildBody","prefix","generateQuadTreeFunction","Function"]
}
