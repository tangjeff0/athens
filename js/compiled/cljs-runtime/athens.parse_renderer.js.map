{"version":3,"sources":["athens/parse_renderer.cljs"],"mappings":"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","names":["athens.parse-renderer/page-link","athens.style.color","athens.style/OPACITIES","athens.parse-renderer/hashtag","athens.parse-renderer/image","athens.parse-renderer/url-link","athens.parse-renderer/block-ref","athens.parse-renderer/parse-title","title-coll","cljs.core.map","el","clojure.string.join","cljs.core.get_in","athens.parse-renderer/pull-node-from-string","title","posh.reagent/pull","athens.db/dsdb","athens.parse-renderer/render-page-link","node","stylefy.core.use_style","cljs.core.into","e","athens.router.navigate_uid","cljs.core/deref","athens.parse-renderer/transform","tree","uid","G__61807","G__61808","instaparse.core/transform","contents","cljs.core.concat","athens.components/render-component","cljs.core/first","p1__61805#","ref-uid","block","p1__61806#","cljs.core._EQ_","athens.parse-renderer/parse-and-render","p__61809","map__61810","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","url","alt","p__61812","map__61813","text","string","result","athens.parser/parse-to-ast","instaparse.core/failure?","cljs.core.pr_str","instaparse.core/get-failure","cljs.core/vec"],"sourcesContent":["(ns athens.parse-renderer\n  (:require\n    [athens.components :as components]\n    [athens.db :as db]\n    [athens.parser :as parser]\n    [athens.router :refer [navigate-uid]]\n    [athens.style :refer [color OPACITIES]]\n    [clojure.string :as str]\n    [instaparse.core :as insta]\n    [posh.reagent :refer [pull #_q]]\n    [stylefy.core :as stylefy :refer [use-style]]))\n\n\n(declare parse-and-render)\n\n\n;;; Styles\n\n(def page-link {:cursor \"pointer\"\n                :text-decoration \"none\"\n                :color (color :link-color)\n                :display \"inline\"\n                :border-radius \"0.25rem\"\n                ::stylefy/manual [[:.formatting {:color (color :body-text-color)\n                                                 :opacity (:opacity-low OPACITIES)}]\n                                  [:&:hover {:z-index 1\n                                             :background (color :link-color :opacity-lower)\n                                             :box-shadow (str \"0px 0px 0px 1px \" (color :link-color :opacity-lower))}]]})\n\n\n(def hashtag {::stylefy/mode [[:hover {:text-decoration \"underline\" :cursor \"pointer\"}]]\n              ::stylefy/manual [[:.formatting {:opacity (:opacity-low OPACITIES)}]]})\n\n\n(def image {:border-radius \"0.125rem\"})\n\n\n(def url-link {:cursor \"pointer\"\n               :text-decoration \"none\"\n               :color (color :link-color)\n               ::stylefy/mode [[:hover {:text-decoration \"underline\"}]]})\n\n\n(def block-ref {:font-size \"0.9em\"\n                :transition \"background 0.05s ease\"\n                :border-bottom [[\"1px\" \"solid\" (color :highlight-color)]]\n                ::stylefy/mode [[:hover {:background-color (color :highlight-color :opacity-lower)\n                                         :cursor \"alias\"}]]})\n\n\n(defn parse-title\n  \"Title coll is a sequence of plain strings or hiccup elements. If string, return string, otherwise parse the hiccup\n  for its plain-text representation.\"\n  [title-coll]\n  (->> (map (fn [el]\n              (if (string? el)\n                el\n                (str \"[[\" (clojure.string/join (get-in el [3 2])) \"]]\"))) title-coll)\n       (str/join \"\")))\n\n\n\n;;; Helper functions for recursive link rendering\n(defn pull-node-from-string\n  \"Gets a block's node from the display string name (or partially parsed string tree)\"\n  [title-coll]\n  (let [title (parse-title title-coll)]\n    (pull db/dsdb '[*] [:node/title title])))\n\n\n(defn render-page-link\n  \"Renders a page link given the title of the page.\"\n  [title]\n  (let [node (pull-node-from-string title)]\n    [:span (use-style page-link {:class \"page-link\"})\n     [:span {:class \"formatting\"} \"[[\"]\n     (into [:span {:on-click (fn [e]\n                               (.. e stopPropagation) ;; prevent bubbling up click handler for nested links\n                               (navigate-uid (:block/uid @node) e))}]\n           title)\n     [:span {:class \"formatting\"} \"]]\"]]))\n\n\n;;; Components\n\n\n;; Instaparse transforming docs: https://github.com/Engelberg/instaparse#transforming-the-tree\n(defn transform\n  \"Transforms Instaparse output to Hiccup.\"\n  [tree uid]\n  (insta/transform\n    {:block         (fn [& contents]\n                      (concat [:span {:class \"block\"}] contents))\n     ;; for more information regarding how custom components are parsed, see `doc/components.md`\n     :component     (fn [& contents]\n                      (components/render-component (first contents) uid))\n     :page-link     (fn [& title-coll] (render-page-link title-coll))\n     :hashtag       (fn [& title-coll]\n                      (let [node (pull-node-from-string title-coll)]\n                        [:span (use-style hashtag {:class    \"hashtag\"\n                                                   :on-click #(navigate-uid (:block/uid @node) %)})\n                         [:span {:class \"formatting\"} \"#\"]\n                         [:span {:class \"contents\"} title-coll]]))\n     :block-ref     (fn [ref-uid]\n                      (let [block (pull db/dsdb '[*] [:block/uid ref-uid])]\n                        (if @block\n                          [:span (use-style block-ref {:class \"block-ref\"})\n                           [:span {:class \"contents\" :on-click #(navigate-uid ref-uid %)}\n                            (if (= uid ref-uid)\n                              [parse-and-render \"{{SELF}}\"]\n                              [parse-and-render (:block/string @block) ref-uid])]]\n                          (str \"((\" ref-uid \"))\"))))\n     :url-image     (fn [{url :url alt :alt}]\n                      [:img (use-style image {:class \"url-image\"\n                                              :alt   alt\n                                              :src   url})])\n     :url-link      (fn [{url :url} text]\n                      [:a (use-style url-link {:class \"url-link\"\n                                               :href  url\n                                               :target \"_blank\"})\n                       text])\n     :bold          (fn [text]\n                      [:strong {:class \"contents bold\"} text])\n     :pre-formatted (fn [text]\n                      [:code text])}\n   tree))\n\n\n(defn parse-and-render\n  \"Converts a string of block syntax to Hiccup, with fallback formatting if it can\u2019t be parsed.\"\n  [string uid]\n  (let [result (parser/parse-to-ast string)]\n    (if (insta/failure? result)\n      [:span\n       {:title (pr-str (insta/get-failure result))\n        :style {:color \"red\"}}\n       string]\n      [vec (transform result uid)])))\n"]}