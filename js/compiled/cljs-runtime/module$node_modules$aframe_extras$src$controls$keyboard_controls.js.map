{
"version":3,
"file":"module$node_modules$aframe_extras$src$controls$keyboard_controls.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/aframe-extras/src/controls/keyboard-controls.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$aframe_extras$src$controls$keyboard_controls\"] = function(global,require,module,exports) {\nrequire('../../lib/keyboard.polyfill');\n\nconst MAX_DELTA = 0.2,\n    PROXY_FLAG = '__keyboard-controls-proxy';\n\nconst KeyboardEvent = window.KeyboardEvent;\n\n/**\n * Keyboard Controls component.\n *\n * Stripped-down version of: https://github.com/donmccurdy/aframe-keyboard-controls\n *\n * Bind keyboard events to components, or control your entities with the WASD keys.\n *\n * Why use KeyboardEvent.code? \"This is set to a string representing the key that was pressed to\n * generate the KeyboardEvent, without taking the current keyboard layout (e.g., QWERTY vs.\n * Dvorak), locale (e.g., English vs. French), or any modifier keys into account. This is useful\n * when you care about which physical key was pressed, rather thanwhich character it corresponds\n * to. For example, if you\u2019re a writing a game, you might want a certain set of keys to move the\n * player in different directions, and that mapping should ideally be independent of keyboard\n * layout. See: https://developers.google.com/web/updates/2016/04/keyboardevent-keys-codes\n *\n * @namespace wasd-controls\n * keys the entity moves and if you release it will stop. Easing simulates friction.\n * to the entity when pressing the keys.\n * @param {bool} [enabled=true] - To completely enable or disable the controls\n */\nmodule.exports = AFRAME.registerComponent('keyboard-controls', {\n  schema: {\n    enabled:           { default: true },\n    debug:             { default: false }\n  },\n\n  init: function () {\n    this.dVelocity = new THREE.Vector3();\n    this.localKeys = {};\n    this.listeners = {\n      keydown: this.onKeyDown.bind(this),\n      keyup: this.onKeyUp.bind(this),\n      blur: this.onBlur.bind(this)\n    };\n    this.attachEventListeners();\n  },\n\n  /*******************************************************************\n  * Movement\n  */\n\n  isVelocityActive: function () {\n    return this.data.enabled && !!Object.keys(this.getKeys()).length;\n  },\n\n  getVelocityDelta: function () {\n    const data = this.data,\n        keys = this.getKeys();\n\n    this.dVelocity.set(0, 0, 0);\n    if (data.enabled) {\n      if (keys.KeyW || keys.ArrowUp)    { this.dVelocity.z -= 1; }\n      if (keys.KeyA || keys.ArrowLeft)  { this.dVelocity.x -= 1; }\n      if (keys.KeyS || keys.ArrowDown)  { this.dVelocity.z += 1; }\n      if (keys.KeyD || keys.ArrowRight) { this.dVelocity.x += 1; }\n    }\n\n    return this.dVelocity.clone();\n  },\n\n  /*******************************************************************\n  * Events\n  */\n\n  play: function () {\n    this.attachEventListeners();\n  },\n\n  pause: function () {\n    this.removeEventListeners();\n  },\n\n  remove: function () {\n    this.pause();\n  },\n\n  attachEventListeners: function () {\n    window.addEventListener('keydown', this.listeners.keydown, false);\n    window.addEventListener('keyup', this.listeners.keyup, false);\n    window.addEventListener('blur', this.listeners.blur, false);\n  },\n\n  removeEventListeners: function () {\n    window.removeEventListener('keydown', this.listeners.keydown);\n    window.removeEventListener('keyup', this.listeners.keyup);\n    window.removeEventListener('blur', this.listeners.blur);\n  },\n\n  onKeyDown: function (event) {\n    if (AFRAME.utils.shouldCaptureKeyEvent(event)) {\n      this.localKeys[event.code] = true;\n      this.emit(event);\n    }\n  },\n\n  onKeyUp: function (event) {\n    if (AFRAME.utils.shouldCaptureKeyEvent(event)) {\n      delete this.localKeys[event.code];\n      this.emit(event);\n    }\n  },\n\n  onBlur: function () {\n    for (let code in this.localKeys) {\n      if (this.localKeys.hasOwnProperty(code)) {\n        delete this.localKeys[code];\n      }\n    }\n  },\n\n  emit: function (event) {\n    // TODO - keydown only initially?\n    // TODO - where the f is the spacebar\n\n    // Emit original event.\n    if (PROXY_FLAG in event) {\n      // TODO - Method never triggered.\n      this.el.emit(event.type, event);\n    }\n\n    // Emit convenience event, identifying key.\n    this.el.emit(event.type + ':' + event.code, new KeyboardEvent(event.type, event));\n    if (this.data.debug) console.log(event.type + ':' + event.code);\n  },\n\n  /*******************************************************************\n  * Accessors\n  */\n\n  isPressed: function (code) {\n    return code in this.getKeys();\n  },\n\n  getKeys: function () {\n    if (this.isProxied()) {\n      return this.el.sceneEl.components['proxy-controls'].getKeyboard();\n    }\n    return this.localKeys;\n  },\n\n  isProxied: function () {\n    const proxyControls = this.el.sceneEl.components['proxy-controls'];\n    return proxyControls && proxyControls.isConnected();\n  }\n\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","KeyboardEvent","window","AFRAME","registerComponent","schema","enabled","default","debug","init","dVelocity","THREE","Vector3","localKeys","listeners","keydown","onKeyDown","bind","keyup","onKeyUp","blur","onBlur","attachEventListeners","isVelocityActive","data","Object","keys","getKeys","length","getVelocityDelta","set","KeyW","ArrowUp","z","KeyA","ArrowLeft","x","KeyS","ArrowDown","KeyD","ArrowRight","clone","play","pause","removeEventListeners","remove","addEventListener","removeEventListener","event","utils","shouldCaptureKeyEvent","code","emit","hasOwnProperty","PROXY_FLAG","el","type","console","log","isPressed","isProxied","sceneEl","components","getKeyboard","proxyControls","isConnected"]
}
