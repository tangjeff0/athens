{"version":3,"sources":["athens/listeners.cljs"],"mappings":"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","names":["athens.listeners/multi-block-selection","e","cljs.core/deref","selected-items","re_frame.core.subscribe","cljs.core/not-empty","shift","key-code","enter?","cljs.core._EQ_","goog.events.KeyCodes/ENTER","bksp?","goog.events.KeyCodes/BACKSPACE","up?","goog.events.KeyCodes/UP","down?","goog.events.KeyCodes/DOWN","tab?","goog.events.KeyCodes/TAB","delete?","goog.events.KeyCodes/DELETE","re-frame.core/dispatch","cljs.core/first","and__4115__auto__","cljs.core/last","athens.listeners/unfocus","selected-items?","editing-uid","closest-block","closest-block-header","closest-page-header","closest-bullet","closest-dropdown","closest","or__4126__auto__","athens.listeners/key-down","map__61696","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","ctrl","meta","alt","athens.util/destruct-key-down","athens.util/shortcut-key?","pred__61698","expr__61699","cljs.core/=","goog.events.KeyCodes/S","goog.events.KeyCodes/K","goog.events.KeyCodes/G","goog.events.KeyCodes/Z","goog.events.KeyCodes/BACKSLASH","goog.events.KeyCodes/H","athens.util/toggle-10x","pred__61701","expr__61702","goog.events.KeyCodes/LEFT","js/window.history","goog.events.KeyCodes/RIGHT","goog.events.KeyCodes/D","athens.router/nav-daily-notes","athens.listeners/walk-str","depth","node","map__61705","string","children","left-offset","cljs.core/str","cljs.core.repeat","walk-children","p1__61704#","cljs.core.map","G__61707","G__61708","athens.listeners/copy","uids","copy-data","p1__61709#","athens.db/get-block-document","p1__61710#","athens.listeners/cut","p1__61711#","p1__61712#","athens.listeners/prevent-save","js/window.addEventListener","goog.events.EventType/BEFOREUNLOAD","synced?","athens.listeners/init","goog.events/listen","js/document","goog.events.EventType/MOUSEDOWN","js/window","goog.events.EventType/KEYDOWN","goog.events.EventType/COPY","goog.events.EventType/CUT"],"sourcesContent":["(ns athens.listeners\n  (:require\n    [athens.db :as db]\n    [athens.router :as router]\n    [athens.util :as util]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [goog.events :as events]\n    [re-frame.core :refer [dispatch subscribe]])\n  (:import\n    (goog.events\n      EventType\n      KeyCodes)))\n\n\n(defn multi-block-selection\n  \"When blocks are selected, handle various keypresses:\n  - shift+up/down: increase/decrease selection.\n  - enter: deselect and begin editing textarea\n  - backspace: delete all blocks\n  - up/down: change editing textarea\n  - tab: indent/unindent blocks\n  Can't use textarea-key-down from keybindings.cljs because textarea is no longer focused.\"\n  [e]\n  (let [selected-items @(subscribe [:selected/items])]\n    (when (not-empty selected-items)\n      (let [shift    (.. e -shiftKey)\n            key-code (.. e -keyCode)\n            enter?   (= key-code KeyCodes.ENTER)\n            bksp?    (= key-code KeyCodes.BACKSPACE)\n            up?      (= key-code KeyCodes.UP)\n            down?    (= key-code KeyCodes.DOWN)\n            tab?     (= key-code KeyCodes.TAB)\n            delete?  (= key-code KeyCodes.DELETE)]\n        (cond\n          enter? (do\n                   (dispatch [:editing/uid (first selected-items)])\n                   (dispatch [:selected/clear-items]))\n          (or bksp? delete?) (dispatch [:selected/delete selected-items])\n          tab? (do\n                 (.preventDefault e)\n                 (if shift\n                   (dispatch [:unindent/multi selected-items])\n                   (dispatch [:indent/multi selected-items])))\n          (and shift up?) (dispatch [:selected/up selected-items])\n          (and shift down?) (dispatch [:selected/down selected-items])\n          (or up? down?) (do\n                           (.preventDefault e)\n                           (dispatch [:selected/clear-items])\n                           (if up?\n                             (dispatch [:up (first selected-items)])\n                             (dispatch [:down (last selected-items)]))))))))\n\n\n(defn unfocus\n  \"Clears editing/uid when user clicks anywhere besides bullets, header, or on a block.\n  Clears selected/items when user clicks somewhere besides a bullet point.\"\n  [e]\n  (let [selected-items?      (not-empty @(subscribe [:selected/items]))\n        editing-uid          @(subscribe [:editing/uid])\n        closest-block        (.. e -target (closest \".block-content\"))\n        closest-block-header (.. e -target (closest \".block-header\"))\n        closest-page-header  (.. e -target (closest \".page-header\"))\n        closest-bullet       (.. e -target (closest \".bullet\"))\n        closest-dropdown     (.. e -target (closest \"#dropdown-menu\"))\n        closest              (or closest-block closest-block-header closest-page-header closest-dropdown)]\n    (when (and selected-items?\n               (nil? closest-bullet))\n      (dispatch [:selected/clear-items]))\n    (when (and (nil? closest)\n               editing-uid)\n      (dispatch [:editing/uid nil]))))\n\n\n;; -- Hotkeys ------------------------------------------------------------\n\n\n(defn key-down\n  [e]\n  (let [{:keys [key-code ctrl meta shift alt]} (util/destruct-key-down e)\n        editing-uid @(subscribe [:editing/uid])]\n    (cond\n      (util/shortcut-key? meta ctrl) (condp = key-code\n                                       KeyCodes.S (dispatch [:save])\n\n                                       KeyCodes.K (dispatch [:athena/toggle])\n\n                                       KeyCodes.G (dispatch [:devtool/toggle])\n\n                                       KeyCodes.Z (let [editing-uid    @(subscribe [:editing/uid])\n                                                        selected-items @(subscribe [:selected/items])]\n                                                    ;; editing/uid must be nil or selected-items must be non-empty\n                                                    (when (or (nil? editing-uid)\n                                                              (not-empty selected-items))\n                                                      (if shift\n                                                        (dispatch [:redo])\n                                                        (dispatch [:undo]))))\n\n                                       KeyCodes.BACKSLASH (if shift\n                                                            (dispatch [:right-sidebar/toggle])\n                                                            (dispatch [:left-sidebar/toggle]))\n                                       KeyCodes.H (util/toggle-10x)\n                                       nil)\n      alt (condp = key-code\n            KeyCodes.LEFT (when (nil? editing-uid) (.back js/window.history))\n            KeyCodes.RIGHT (when (nil? editing-uid) (.forward js/window.history))\n            KeyCodes.D (router/nav-daily-notes)\n            nil))))\n\n\n;; -- Clipboard ----------------------------------------------------------\n\n(defn walk-str\n  \"Four spaces per depth level.\"\n  [depth node]\n  (let [{:block/keys [string children]} node\n        left-offset   (apply str (repeat depth \"    \"))\n        walk-children (apply str (map #(walk-str (inc depth) %) children))]\n    (str left-offset \"- \" string \"\\n\" walk-children)))\n\n\n(defn copy\n  \"If blocks are selected, copy blocks as markdown list.\n  Use -event_ because goog events quirk \"\n  [^js e]\n  (let [uids @(subscribe [:selected/items])]\n    (when (not-empty uids)\n      (let [copy-data (->> (map #(db/get-block-document [:block/uid %]) uids)\n                           (map #(walk-str 0 %))\n                           (apply str))]\n        (.. e preventDefault)\n        (.. e -event_ -clipboardData (setData \"text/plain\" copy-data))))))\n\n\n(defn cut\n  \"Cut is essentially copy AND delete selected blocks\"\n  [^js e]\n  (let [uids @(subscribe [:selected/items])]\n    (when (not-empty uids)\n      (let [copy-data (->> (map #(db/get-block-document [:block/uid %]) uids)\n                           (map #(walk-str 0 %))\n                           (apply str))]\n        (.. e preventDefault)\n        (.. e -event_ -clipboardData (setData \"text/plain\" copy-data))\n        (dispatch [:selected/delete uids])))))\n\n\n(defn prevent-save\n  \"Google Closure's events/listen isn't working for some reason anymore.\n\n  beforeunload is called before unload, where the window would be redirected/refreshed/quit.\n  https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event \"\n  []\n  (js/window.addEventListener\n    EventType.BEFOREUNLOAD\n    (fn [e]\n      (let [synced? @(subscribe [:db/synced])]\n        (when-not synced?\n          (dispatch [:alert/js \"Athens hasn't finished saving yet. Athens is finished saving when the sync dot is green. Try refreshing or quitting again once the sync is complete.\"])\n          (.. e preventDefault)\n          (set! (.. e -returnValue) \"Setting e.returnValue to string prevents exit for some browsers.\")\n          \"Returning a string also prevents exit on other browsers.\")))))\n\n\n(defn init\n  []\n  (events/listen js/document EventType.MOUSEDOWN unfocus)\n  (events/listen js/window EventType.KEYDOWN multi-block-selection)\n  (events/listen js/window EventType.KEYDOWN key-down)\n  (events/listen js/window EventType.COPY copy)\n  (events/listen js/window EventType.CUT cut)\n  (prevent-save))\n"]}