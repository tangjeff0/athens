{
"version":3,
"file":"module$node_modules$three$examples$jsm$postprocessing$ShaderPass.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAe,gEAAf,CAAqF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG7HC,MAAA,CAAOC,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAA,CAAQI,UAAR,CAAqB,IAAK,EAE1B,KAAIC,aAAeP,OAAA,CAAQ,8CAAR,CAAnB,CAEIQ,MAAQR,OAAA,CAAQ,4DAAR,CAERM,OAAAA,CAAaA,QAAmB,CAACG,MAAD,CAASC,SAAT,CAAoB,CACtDF,KAAA,CAAMG,IAAN,CAAWC,IAAX,CAAgB,IAAhB,CAEA,KAAA,CAAKF,SAAL,CAA+BG,IAAAA,EAAd,GAAAH,SAAA,CAA0BA,SAA1B,CAAsC,UAEnDD,OAAJ,WAAsBF,aAAtB,CAAmCO,cAAnC;CACE,IACA,CADKC,QACL,CADgBN,MAChB,CADuBM,QACvB,CAAA,IAAA,CAAKC,QAAL,CAAgBP,MAFlB,EAGWA,MAHX,GAIE,IACA,CADKM,QACL,CADgBR,YAAA,CAAaU,aAAb,CAA2BC,KAA3B,CAAiCT,MAAjC,CAAwCM,QAAxC,CAChB,CAAA,IAAA,CAAKC,QAAL,CAAgB,IAAIT,YAAJ,CAAiBO,cAAjB,CAAgC,CAC9CK,QAAShB,MAAA,CAAOiB,MAAP,CAAc,EAAd,CAAkBX,MAAlB,CAAyBU,OAAzB,CADqC,CAE9CJ,SAAU,IAAVA,CAAeA,QAF+B,CAG9CM,aAAcZ,MAAdY,CAAqBA,YAHyB,CAI9CC,eAAgBb,MAAhBa,CAAuBA,cAJuB,CAAhC,CALlB,CAaA,KAAA,CAAKC,MAAL,CAAc,IAAIf,KAAJ,CAAUG,IAAV,CAAea,cAAf,CAA8B,IAA9B,CAAmCR,QAAnC,CAlBwC,CAqBxDd,QAAA,CAAQI,UAAR,CAAqBA,MACrBA,OAAA,CAAWmB,SAAX,CAAuBtB,MAAA,CAAOiB,MAAP,CAAcjB,MAAA,CAAOuB,MAAP,CAAclB,KAAd,CAAoBG,IAApB,CAAyBc,SAAzB,CAAd,CAAmD,CACxEE,YAAarB,MAD2D,CAExEsB,OAAQA,QAAe,CAACC,QAAD;AAAWC,WAAX,CAAwBC,UAAxB,CAErB,CACI,IAAA,CAAKhB,QAAL,CAAc,IAAd,CAAmBL,SAAnB,CAAJ,GACE,IAAA,CAAKK,QAAL,CAAc,IAAd,CAAmBL,SAAnB,CADF,CACgCL,KADhC,CACwC0B,UADxC,CACmDC,OADnD,CAIA,KAAA,CAAKT,MAAL,CAAYP,QAAZ,CAAuB,IAAvB,CAA4BA,QAExB,KAAJ,CAASiB,cAAT,CACEJ,QAAA,CAASK,eAAT,CAAyB,IAAzB,CADF,EAIEL,QAAA,CAASK,eAAT,CAAyBJ,WAAzB,CAEA,CAAI,IAAJ,CAASK,KAAT,EAAgBN,QAAA,CAASM,KAAT,CAAeN,QAAf,CAAwBO,cAAxB,CAAwCP,QAAxC,CAAiDQ,cAAjD,CAAiER,QAAjE,CAA0ES,gBAA1E,CANlB,CAEE,KAAA,CAAKf,MAAL,CAAYK,MAAZ,CAAmBC,QAAnB,CATF,CAJsE,CAAnD,CAlCsG;",
"sources":["node_modules/three/examples/jsm/postprocessing/ShaderPass.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$three$examples$jsm$postprocessing$ShaderPass\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ShaderPass = void 0;\n\nvar _threeModule = require(\"../../../build/three.module.js\");\n\nvar _Pass = require(\"../postprocessing/Pass.js\");\n\nvar ShaderPass = function ShaderPass(shader, textureID) {\n  _Pass.Pass.call(this);\n\n  this.textureID = textureID !== undefined ? textureID : 'tDiffuse';\n\n  if (shader instanceof _threeModule.ShaderMaterial) {\n    this.uniforms = shader.uniforms;\n    this.material = shader;\n  } else if (shader) {\n    this.uniforms = _threeModule.UniformsUtils.clone(shader.uniforms);\n    this.material = new _threeModule.ShaderMaterial({\n      defines: Object.assign({}, shader.defines),\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n  }\n\n  this.fsQuad = new _Pass.Pass.FullScreenQuad(this.material);\n};\n\nexports.ShaderPass = ShaderPass;\nShaderPass.prototype = Object.assign(Object.create(_Pass.Pass.prototype), {\n  constructor: ShaderPass,\n  render: function render(renderer, writeBuffer, readBuffer\n  /*, deltaTime, maskActive */\n  ) {\n    if (this.uniforms[this.textureID]) {\n      this.uniforms[this.textureID].value = readBuffer.texture;\n    }\n\n    this.fsQuad.material = this.material;\n\n    if (this.renderToScreen) {\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    } else {\n      renderer.setRenderTarget(writeBuffer); // TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\n      if (this.clear) renderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n      this.fsQuad.render(renderer);\n    }\n  }\n});\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","ShaderPass","_threeModule","_Pass","shader","textureID","Pass","call","undefined","ShaderMaterial","uniforms","material","UniformsUtils","clone","defines","assign","vertexShader","fragmentShader","fsQuad","FullScreenQuad","prototype","create","constructor","render","renderer","writeBuffer","readBuffer","texture","renderToScreen","setRenderTarget","clear","autoClearColor","autoClearDepth","autoClearStencil"]
}
