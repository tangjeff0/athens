{
"version":3,
"file":"module$node_modules$ngraph_DOT_graph$index.js",
"lineCount":12,
"mappings":"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",
"sources":["node_modules/ngraph_DOT_graph/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ngraph_DOT_graph$index\"] = function(global,require,module,exports) {\n/**\n * @fileOverview Contains definition of the core graph object.\n */\n\n// TODO: need to change storage layer:\n// 1. Be able to get all nodes O(1)\n// 2. Be able to get number of links O(1)\n\n/**\n * @example\n *  var graph = require('ngraph.graph')();\n *  graph.addNode(1);     // graph has one node.\n *  graph.addLink(2, 3);  // now graph contains three nodes and one link.\n *\n */\nmodule.exports = createGraph;\n\nvar eventify = require('ngraph.events');\n\n/**\n * Creates a new graph\n */\nfunction createGraph(options) {\n  // Graph structure is maintained as dictionary of nodes\n  // and array of links. Each node has 'links' property which\n  // hold all links related to that node. And general links\n  // array is used to speed up all links enumeration. This is inefficient\n  // in terms of memory, but simplifies coding.\n  options = options || {};\n  if ('uniqueLinkId' in options) {\n    console.warn(\n      'ngraph.graph: Starting from version 0.14 `uniqueLinkId` is deprecated.\\n' +\n      'Use `multigraph` option instead\\n',\n      '\\n',\n      'Note: there is also change in default behavior: From now on each graph\\n'+\n      'is considered to be not a multigraph by default (each edge is unique).'\n    );\n\n    options.multigraph = options.uniqueLinkId;\n  }\n\n  // Dear reader, the non-multigraphs do not guarantee that there is only\n  // one link for a given pair of node. When this option is set to false\n  // we can save some memory and CPU (18% faster for non-multigraph);\n  if (options.multigraph === undefined) options.multigraph = false;\n\n  if (typeof Map !== 'function') {\n    // TODO: Should we polyfill it ourselves? We don't use much operations there..\n    throw new Error('ngraph.graph requires `Map` to be defined. Please polyfill it before using ngraph');\n  } \n\n  var nodes = new Map();\n  var links = [],\n    // Hash of multi-edges. Used to track ids of edges between same nodes\n    multiEdges = {},\n    suspendEvents = 0,\n\n    createLink = options.multigraph ? createUniqueLink : createSingleLink,\n\n    // Our graph API provides means to listen to graph changes. Users can subscribe\n    // to be notified about changes in the graph by using `on` method. However\n    // in some cases they don't use it. To avoid unnecessary memory consumption\n    // we will not record graph changes until we have at least one subscriber.\n    // Code below supports this optimization.\n    //\n    // Accumulates all changes made during graph updates.\n    // Each change element contains:\n    //  changeType - one of the strings: 'add', 'remove' or 'update';\n    //  node - if change is related to node this property is set to changed graph's node;\n    //  link - if change is related to link this property is set to changed graph's link;\n    changes = [],\n    recordLinkChange = noop,\n    recordNodeChange = noop,\n    enterModification = noop,\n    exitModification = noop;\n\n  // this is our public API:\n  var graphPart = {\n    /**\n     * Adds node to the graph. If node with given id already exists in the graph\n     * its data is extended with whatever comes in 'data' argument.\n     *\n     * @param nodeId the node's identifier. A string or number is preferred.\n     * @param [data] additional data for the node being added. If node already\n     *   exists its data object is augmented with the new one.\n     *\n     * @return {node} The newly added node or node with given id if it already exists.\n     */\n    addNode: addNode,\n\n    /**\n     * Adds a link to the graph. The function always create a new\n     * link between two nodes. If one of the nodes does not exists\n     * a new node is created.\n     *\n     * @param fromId link start node id;\n     * @param toId link end node id;\n     * @param [data] additional data to be set on the new link;\n     *\n     * @return {link} The newly created link\n     */\n    addLink: addLink,\n\n    /**\n     * Removes link from the graph. If link does not exist does nothing.\n     *\n     * @param link - object returned by addLink() or getLinks() methods.\n     *\n     * @returns true if link was removed; false otherwise.\n     */\n    removeLink: removeLink,\n\n    /**\n     * Removes node with given id from the graph. If node does not exist in the graph\n     * does nothing.\n     *\n     * @param nodeId node's identifier passed to addNode() function.\n     *\n     * @returns true if node was removed; false otherwise.\n     */\n    removeNode: removeNode,\n\n    /**\n     * Gets node with given identifier. If node does not exist undefined value is returned.\n     *\n     * @param nodeId requested node identifier;\n     *\n     * @return {node} in with requested identifier or undefined if no such node exists.\n     */\n    getNode: getNode,\n\n    /**\n     * Gets number of nodes in this graph.\n     *\n     * @return number of nodes in the graph.\n     */\n    getNodeCount: getNodeCount,\n\n    /**\n     * Gets total number of links in the graph.\n     */\n    getLinkCount: getLinkCount,\n\n    /**\n     * Synonym for `getLinkCount()`\n     */\n    getLinksCount: getLinkCount,\n    \n    /**\n     * Synonym for `getNodeCount()`\n     */\n    getNodesCount: getNodeCount,\n\n    /**\n     * Gets all links (inbound and outbound) from the node with given id.\n     * If node with given id is not found null is returned.\n     *\n     * @param nodeId requested node identifier.\n     *\n     * @return Array of links from and to requested node if such node exists;\n     *   otherwise null is returned.\n     */\n    getLinks: getLinks,\n\n    /**\n     * Invokes callback on each node of the graph.\n     *\n     * @param {Function(node)} callback Function to be invoked. The function\n     *   is passed one argument: visited node.\n     */\n    forEachNode: forEachNode,\n\n    /**\n     * Invokes callback on every linked (adjacent) node to the given one.\n     *\n     * @param nodeId Identifier of the requested node.\n     * @param {Function(node, link)} callback Function to be called on all linked nodes.\n     *   The function is passed two parameters: adjacent node and link object itself.\n     * @param oriented if true graph treated as oriented.\n     */\n    forEachLinkedNode: forEachLinkedNode,\n\n    /**\n     * Enumerates all links in the graph\n     *\n     * @param {Function(link)} callback Function to be called on all links in the graph.\n     *   The function is passed one parameter: graph's link object.\n     *\n     * Link object contains at least the following fields:\n     *  fromId - node id where link starts;\n     *  toId - node id where link ends,\n     *  data - additional data passed to graph.addLink() method.\n     */\n    forEachLink: forEachLink,\n\n    /**\n     * Suspend all notifications about graph changes until\n     * endUpdate is called.\n     */\n    beginUpdate: enterModification,\n\n    /**\n     * Resumes all notifications about graph changes and fires\n     * graph 'changed' event in case there are any pending changes.\n     */\n    endUpdate: exitModification,\n\n    /**\n     * Removes all nodes and links from the graph.\n     */\n    clear: clear,\n\n    /**\n     * Detects whether there is a link between two nodes.\n     * Operation complexity is O(n) where n - number of links of a node.\n     * NOTE: this function is synonim for getLink()\n     *\n     * @returns link if there is one. null otherwise.\n     */\n    hasLink: getLink,\n\n    /**\n     * Detects whether there is a node with given id\n     * \n     * Operation complexity is O(1)\n     * NOTE: this function is synonim for getNode()\n     *\n     * @returns node if there is one; Falsy value otherwise.\n     */\n    hasNode: getNode,\n\n    /**\n     * Gets an edge between two nodes.\n     * Operation complexity is O(n) where n - number of links of a node.\n     *\n     * @param {string} fromId link start identifier\n     * @param {string} toId link end identifier\n     *\n     * @returns link if there is one. null otherwise.\n     */\n    getLink: getLink\n  };\n\n  // this will add `on()` and `fire()` methods.\n  eventify(graphPart);\n\n  monitorSubscribers();\n\n  return graphPart;\n\n  function monitorSubscribers() {\n    var realOn = graphPart.on;\n\n    // replace real `on` with our temporary on, which will trigger change\n    // modification monitoring:\n    graphPart.on = on;\n\n    function on() {\n      // now it's time to start tracking stuff:\n      graphPart.beginUpdate = enterModification = enterModificationReal;\n      graphPart.endUpdate = exitModification = exitModificationReal;\n      recordLinkChange = recordLinkChangeReal;\n      recordNodeChange = recordNodeChangeReal;\n\n      // this will replace current `on` method with real pub/sub from `eventify`.\n      graphPart.on = realOn;\n      // delegate to real `on` handler:\n      return realOn.apply(graphPart, arguments);\n    }\n  }\n\n  function recordLinkChangeReal(link, changeType) {\n    changes.push({\n      link: link,\n      changeType: changeType\n    });\n  }\n\n  function recordNodeChangeReal(node, changeType) {\n    changes.push({\n      node: node,\n      changeType: changeType\n    });\n  }\n\n  function addNode(nodeId, data) {\n    if (nodeId === undefined) {\n      throw new Error('Invalid node identifier');\n    }\n\n    enterModification();\n\n    var node = getNode(nodeId);\n    if (!node) {\n      node = new Node(nodeId, data);\n      recordNodeChange(node, 'add');\n    } else {\n      node.data = data;\n      recordNodeChange(node, 'update');\n    }\n\n    nodes.set(nodeId, node);\n\n    exitModification();\n    return node;\n  }\n\n  function getNode(nodeId) {\n    return nodes.get(nodeId);\n  }\n\n  function removeNode(nodeId) {\n    var node = getNode(nodeId);\n    if (!node) {\n      return false;\n    }\n\n    enterModification();\n\n    var prevLinks = node.links;\n    if (prevLinks) {\n      node.links = null;\n      for(var i = 0; i < prevLinks.length; ++i) {\n        removeLink(prevLinks[i]);\n      }\n    }\n\n    nodes.delete(nodeId)\n\n    recordNodeChange(node, 'remove');\n\n    exitModification();\n\n    return true;\n  }\n\n\n  function addLink(fromId, toId, data) {\n    enterModification();\n\n    var fromNode = getNode(fromId) || addNode(fromId);\n    var toNode = getNode(toId) || addNode(toId);\n\n    var link = createLink(fromId, toId, data);\n\n    links.push(link);\n\n    // TODO: this is not cool. On large graphs potentially would consume more memory.\n    addLinkToNode(fromNode, link);\n    if (fromId !== toId) {\n      // make sure we are not duplicating links for self-loops\n      addLinkToNode(toNode, link);\n    }\n\n    recordLinkChange(link, 'add');\n\n    exitModification();\n\n    return link;\n  }\n\n  function createSingleLink(fromId, toId, data) {\n    var linkId = makeLinkId(fromId, toId);\n    return new Link(fromId, toId, data, linkId);\n  }\n\n  function createUniqueLink(fromId, toId, data) {\n    // TODO: Get rid of this method.\n    var linkId = makeLinkId(fromId, toId);\n    var isMultiEdge = multiEdges.hasOwnProperty(linkId);\n    if (isMultiEdge || getLink(fromId, toId)) {\n      if (!isMultiEdge) {\n        multiEdges[linkId] = 0;\n      }\n      var suffix = '@' + (++multiEdges[linkId]);\n      linkId = makeLinkId(fromId + suffix, toId + suffix);\n    }\n\n    return new Link(fromId, toId, data, linkId);\n  }\n\n  function getNodeCount() {\n    return nodes.size;\n  }\n\n  function getLinkCount() {\n    return links.length;\n  }\n\n  function getLinks(nodeId) {\n    var node = getNode(nodeId);\n    return node ? node.links : null;\n  }\n\n  function removeLink(link) {\n    if (!link) {\n      return false;\n    }\n    var idx = indexOfElementInArray(link, links);\n    if (idx < 0) {\n      return false;\n    }\n\n    enterModification();\n\n    links.splice(idx, 1);\n\n    var fromNode = getNode(link.fromId);\n    var toNode = getNode(link.toId);\n\n    if (fromNode) {\n      idx = indexOfElementInArray(link, fromNode.links);\n      if (idx >= 0) {\n        fromNode.links.splice(idx, 1);\n      }\n    }\n\n    if (toNode) {\n      idx = indexOfElementInArray(link, toNode.links);\n      if (idx >= 0) {\n        toNode.links.splice(idx, 1);\n      }\n    }\n\n    recordLinkChange(link, 'remove');\n\n    exitModification();\n\n    return true;\n  }\n\n  function getLink(fromNodeId, toNodeId) {\n    // TODO: Use sorted links to speed this up\n    var node = getNode(fromNodeId),\n      i;\n    if (!node || !node.links) {\n      return null;\n    }\n\n    for (i = 0; i < node.links.length; ++i) {\n      var link = node.links[i];\n      if (link.fromId === fromNodeId && link.toId === toNodeId) {\n        return link;\n      }\n    }\n\n    return null; // no link.\n  }\n\n  function clear() {\n    enterModification();\n    forEachNode(function(node) {\n      removeNode(node.id);\n    });\n    exitModification();\n  }\n\n  function forEachLink(callback) {\n    var i, length;\n    if (typeof callback === 'function') {\n      for (i = 0, length = links.length; i < length; ++i) {\n        callback(links[i]);\n      }\n    }\n  }\n\n  function forEachLinkedNode(nodeId, callback, oriented) {\n    var node = getNode(nodeId);\n\n    if (node && node.links && typeof callback === 'function') {\n      if (oriented) {\n        return forEachOrientedLink(node.links, nodeId, callback);\n      } else {\n        return forEachNonOrientedLink(node.links, nodeId, callback);\n      }\n    }\n  }\n\n  function forEachNonOrientedLink(links, nodeId, callback) {\n    var quitFast;\n    for (var i = 0; i < links.length; ++i) {\n      var link = links[i];\n      var linkedNodeId = link.fromId === nodeId ? link.toId : link.fromId;\n\n      quitFast = callback(nodes.get(linkedNodeId), link);\n      if (quitFast) {\n        return true; // Client does not need more iterations. Break now.\n      }\n    }\n  }\n\n  function forEachOrientedLink(links, nodeId, callback) {\n    var quitFast;\n    for (var i = 0; i < links.length; ++i) {\n      var link = links[i];\n      if (link.fromId === nodeId) {\n        quitFast = callback(nodes.get(link.toId), link)\n        if (quitFast) {\n          return true; // Client does not need more iterations. Break now.\n        }\n      }\n    }\n  }\n\n  // we will not fire anything until users of this library explicitly call `on()`\n  // method.\n  function noop() {}\n\n  // Enter, Exit modification allows bulk graph updates without firing events.\n  function enterModificationReal() {\n    suspendEvents += 1;\n  }\n\n  function exitModificationReal() {\n    suspendEvents -= 1;\n    if (suspendEvents === 0 && changes.length > 0) {\n      graphPart.fire('changed', changes);\n      changes.length = 0;\n    }\n  }\n\n  function forEachNode(callback) {\n    if (typeof callback !== 'function') {\n      throw new Error('Function is expected to iterate over graph nodes. You passed ' + callback);\n    }\n\n    var valuesIterator = nodes.values();\n    var nextValue = valuesIterator.next();\n    while (!nextValue.done) {\n      if (callback(nextValue.value)) {\n        return true; // client doesn't want to proceed. Return.\n      }\n      nextValue = valuesIterator.next();\n    }\n  }\n}\n\n// need this for old browsers. Should this be a separate module?\nfunction indexOfElementInArray(element, array) {\n  if (!array) return -1;\n\n  if (array.indexOf) {\n    return array.indexOf(element);\n  }\n\n  var len = array.length,\n    i;\n\n  for (i = 0; i < len; i += 1) {\n    if (array[i] === element) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n/**\n * Internal structure to represent node;\n */\nfunction Node(id, data) {\n  this.id = id;\n  this.links = null;\n  this.data = data;\n}\n\nfunction addLinkToNode(node, link) {\n  if (node.links) {\n    node.links.push(link);\n  } else {\n    node.links = [link];\n  }\n}\n\n/**\n * Internal structure to represent links;\n */\nfunction Link(fromId, toId, data, id) {\n  this.fromId = fromId;\n  this.toId = toId;\n  this.data = data;\n  this.id = id;\n}\n\nfunction makeLinkId(fromId, toId) {\n  return fromId.toString() + '\ud83d\udc49 ' + toId.toString();\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","indexOfElementInArray","element","array","indexOf","len","length","i","Node","id","data","links","Link","fromId","toId","makeLinkId","toString","createGraph","options","recordLinkChangeReal","link","changeType","changes","push","recordNodeChangeReal","node","addNode","nodeId","undefined","Error","enterModification","getNode","recordNodeChange","nodes","set","exitModification","get","removeNode","prevLinks","removeLink","delete","createSingleLink","linkId","createUniqueLink","isMultiEdge","multiEdges","hasOwnProperty","getLink","suffix","getNodeCount","size","getLinkCount","idx","splice","fromNode","toNode","recordLinkChange","fromNodeId","toNodeId","noop","enterModificationReal","suspendEvents","exitModificationReal","graphPart","fire","forEachNode","callback","valuesIterator","values","nextValue","next","done","value","console","warn","multigraph","uniqueLinkId","Map","createLink","addLink","getLinksCount","getNodesCount","getLinks","forEachLinkedNode","oriented","quitFast","linkedNodeId","forEachLink","beginUpdate","endUpdate","clear","hasLink","hasNode","eventify","monitorSubscribers","realOn","on","apply","arguments"]
}
