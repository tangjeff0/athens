shadow$provide.module$node_modules$d3_array$dist$d3_array=function(global$jscomp$0,require,module,exports$jscomp$0){(function(global,factory){"object"===typeof exports$jscomp$0&&"undefined"!==typeof module?factory(exports$jscomp$0):"function"===typeof define&&define.amd?define(["exports"],factory):(global="undefined"!==typeof globalThis?globalThis:global||self,factory(global.d3=global.d3||{}))})(this,function(exports){function ascending(a,b){return a<b?-1:a>b?1:a>=b?0:NaN}function bisector(f){function left(a,
x,lo,hi){null==lo&&(lo=0);null==hi&&(hi=a.length);for(;lo<hi;){var mid=lo+hi>>>1;0>compare(a[mid],x)?lo=mid+1:hi=mid}return lo}var delta=f,compare=f;1===f.length&&(delta=function(d,x){return f(d)-x},compare=ascendingComparator(f));return{left:left,center:function(a,x,lo,hi){null==lo&&(lo=0);null==hi&&(hi=a.length);hi=left(a,x,lo,hi-1);return hi>lo&&delta(a[hi-1],x)>-delta(a[hi],x)?hi-1:hi},right:function(a,x,lo,hi){null==lo&&(lo=0);null==hi&&(hi=a.length);for(;lo<hi;){var mid=lo+hi>>>1;0<compare(a[mid],
x)?hi=mid:lo=mid+1}return lo}}}function ascendingComparator(f){return function(d,x){return ascending(f(d),x)}}function number(x){return null===x?NaN:+x}function numbers(values,valueof){var index$185,$jscomp$iter$3,$jscomp$key$value,value$186,$jscomp$iter$2,value;return $jscomp.generator.createGenerator(numbers,function($jscomp$generator$context){switch($jscomp$generator$context.nextAddress){case 1:if(void 0===valueof){$jscomp$generator$context.jumpTo(2);break}index$185=-1;$jscomp$iter$3=$jscomp.makeIterator(values);
$jscomp$key$value=$jscomp$iter$3.next();case 4:if($jscomp$key$value.done){$jscomp$generator$context.jumpTo(0);break}value$186=$jscomp$key$value.value;if(!(null!=(value$186=valueof(value$186,++index$185,values))&&(value$186=+value$186)>=value$186)){$jscomp$generator$context.jumpTo(5);break}return $jscomp$generator$context.yield(value$186,5);case 5:$jscomp$key$value=$jscomp$iter$3.next();$jscomp$generator$context.jumpTo(4);break;case 2:$jscomp$iter$2=$jscomp.makeIterator(values),$jscomp$key$value=$jscomp$iter$2.next();
case 9:if($jscomp$key$value.done){$jscomp$generator$context.jumpTo(0);break}value=$jscomp$key$value.value;if(!(null!=value&&(value=+value)>=value)){$jscomp$generator$context.jumpTo(10);break}return $jscomp$generator$context.yield(value,10);case 10:$jscomp$key$value=$jscomp$iter$2.next(),$jscomp$generator$context.jumpTo(9)}})}function count$jscomp$0(values,valueof){var count=0;if(void 0===valueof){values=$jscomp.makeIterator(values);for(var $jscomp$key$value=values.next();!$jscomp$key$value.done;$jscomp$key$value=
values.next())valueof=$jscomp$key$value.value,null!=valueof&&(valueof=+valueof)>=valueof&&++count}else{var index$187=-1,$jscomp$iter$5=$jscomp.makeIterator(values);for($jscomp$key$value=$jscomp$iter$5.next();!$jscomp$key$value.done;$jscomp$key$value=$jscomp$iter$5.next())$jscomp$key$value=$jscomp$key$value.value,null!=($jscomp$key$value=valueof($jscomp$key$value,++index$187,values))&&($jscomp$key$value=+$jscomp$key$value)>=$jscomp$key$value&&++count}return count}function length$jscomp$0(array){return array.length|
0}function empty(length){return!(0<length)}function arrayify(values){return"object"!==typeof values||"length"in values?values:Array.from(values)}function reducer$jscomp$0(reduce){return function(values){return reduce.apply(null,$jscomp.arrayFromIterable(values))}}function variance(values,valueof){var count=0,delta,mean=0,sum=0;if(void 0===valueof)for(values=$jscomp.makeIterator(values),delta=values.next();!delta.done;delta=values.next())valueof=delta.value,null!=valueof&&(valueof=+valueof)>=valueof&&
(delta=valueof-mean,mean+=delta/++count,sum+=delta*(valueof-mean));else{var index$192=-1,$jscomp$iter$7=$jscomp.makeIterator(values);for(delta=$jscomp$iter$7.next();!delta.done;delta=$jscomp$iter$7.next()){var value$193=delta.value;null!=(value$193=valueof(value$193,++index$192,values))&&(value$193=+value$193)>=value$193&&(delta=value$193-mean,mean+=delta/++count,sum+=delta*(value$193-mean))}}if(1<count)return sum/(count-1)}function deviation(values,valueof){return(values=variance(values,valueof))?
Math.sqrt(values):values}function extent(values,valueof){var min,max;if(void 0===valueof){values=$jscomp.makeIterator(values);for(var $jscomp$key$value=values.next();!$jscomp$key$value.done;$jscomp$key$value=values.next())valueof=$jscomp$key$value.value,null!=valueof&&(void 0===min?valueof>=valueof&&(min=max=valueof):(min>valueof&&(min=valueof),max<valueof&&(max=valueof)))}else{var index$194=-1,$jscomp$iter$9=$jscomp.makeIterator(values);for($jscomp$key$value=$jscomp$iter$9.next();!$jscomp$key$value.done;$jscomp$key$value=
$jscomp$iter$9.next())$jscomp$key$value=$jscomp$key$value.value,null!=($jscomp$key$value=valueof($jscomp$key$value,++index$194,values))&&(void 0===min?$jscomp$key$value>=$jscomp$key$value&&(min=max=$jscomp$key$value):(min>$jscomp$key$value&&(min=$jscomp$key$value),max<$jscomp$key$value&&(max=$jscomp$key$value)))}return[min,max]}function intern_get($jscomp$destructuring$var6,value){var _intern=$jscomp$destructuring$var6._intern;$jscomp$destructuring$var6=$jscomp$destructuring$var6._key;$jscomp$destructuring$var6=
$jscomp$destructuring$var6(value);return _intern.has($jscomp$destructuring$var6)?_intern.get($jscomp$destructuring$var6):value}function intern_set($jscomp$destructuring$var8,value){var _intern=$jscomp$destructuring$var8._intern;$jscomp$destructuring$var8=$jscomp$destructuring$var8._key;$jscomp$destructuring$var8=$jscomp$destructuring$var8(value);if(_intern.has($jscomp$destructuring$var8))return _intern.get($jscomp$destructuring$var8);_intern.set($jscomp$destructuring$var8,value);return value}function intern_delete($jscomp$destructuring$var10,
value){var _intern=$jscomp$destructuring$var10._intern;$jscomp$destructuring$var10=$jscomp$destructuring$var10._key;$jscomp$destructuring$var10=$jscomp$destructuring$var10(value);_intern.has($jscomp$destructuring$var10)&&(value=_intern.get(value),_intern.delete($jscomp$destructuring$var10));return value}function keyof(value){return null!==value&&"object"===typeof value?value.valueOf():value}function identity(x){return x}function group(values,keys){for(var $jscomp$restParams=[],$jscomp$restIndex=1;$jscomp$restIndex<
arguments.length;++$jscomp$restIndex)$jscomp$restParams[$jscomp$restIndex-1]=arguments[$jscomp$restIndex];return nest(values,identity,identity,$jscomp$restParams)}function rollup(values,reduce,keys){for(var $jscomp$restParams=[],$jscomp$restIndex=2;$jscomp$restIndex<arguments.length;++$jscomp$restIndex)$jscomp$restParams[$jscomp$restIndex-2]=arguments[$jscomp$restIndex];return nest(values,identity,reduce,$jscomp$restParams)}function unique(values){if(1!==values.length)throw Error("duplicate key");
return values[0]}function nest(values$jscomp$0,map,reduce,keys){return function regroup(values,i){if(i>=keys.length)return reduce(values);for(var groups=new InternMap,keyof=keys[i++],index=-1,$jscomp$iter$14=$jscomp.makeIterator(values),$jscomp$key$value=$jscomp$iter$14.next();!$jscomp$key$value.done;$jscomp$key$value=$jscomp$iter$14.next()){$jscomp$key$value=$jscomp$key$value.value;var key=keyof($jscomp$key$value,++index,values),group$205=groups.get(key);group$205?group$205.push($jscomp$key$value):
groups.set(key,[$jscomp$key$value])}values=$jscomp.makeIterator(groups);for(keyof=values.next();!keyof.done;keyof=values.next())index=$jscomp.makeIterator(keyof.value),keyof=index.next().value,index=index.next().value,groups.set(keyof,regroup(index,i));return map(groups)}(values$jscomp$0,0)}function permute(source,keys){return Array.from(keys,function(key){return source[key]})}function sort(values,F){for(var $jscomp$restParams=[],$jscomp$restIndex=1;$jscomp$restIndex<arguments.length;++$jscomp$restIndex)$jscomp$restParams[$jscomp$restIndex-
1]=arguments[$jscomp$restIndex];var F$208=$jscomp$restParams;if("function"!==typeof values[Symbol.iterator])throw new TypeError("values is not iterable");values=Array.from(values);$jscomp$restParams=$jscomp.makeIterator(F$208).next().value;var f$jscomp$0=void 0===$jscomp$restParams?ascending:$jscomp$restParams;return 1===f$jscomp$0.length||1<F$208.length?($jscomp$restParams=Uint32Array.from(values,function(d,i){return i}),1<F$208.length?(F$208=F$208.map(function(f){return values.map(f)}),$jscomp$restParams.sort(function(i,
j){for(var $jscomp$iter$16=$jscomp.makeIterator(F$208),$jscomp$key$f=$jscomp$iter$16.next();!$jscomp$key$f.done;$jscomp$key$f=$jscomp$iter$16.next())if($jscomp$key$f=$jscomp$key$f.value,$jscomp$key$f=ascending($jscomp$key$f[i],$jscomp$key$f[j]))return $jscomp$key$f})):(f$jscomp$0=values.map(f$jscomp$0),$jscomp$restParams.sort(function(i,j){return ascending(f$jscomp$0[i],f$jscomp$0[j])})),permute(values,$jscomp$restParams)):values.sort(f$jscomp$0)}function constant(x){return function(){return x}}function ticks(start,
stop,count){var reverse,i=-1,step;stop=+stop;start=+start;count=+count;if(start===stop&&0<count)return[start];if(reverse=stop<start){var n=start;start=stop;stop=n}if(0===(step=tickIncrement(start,stop,count))||!isFinite(step))return[];if(0<step)for(start=Math.ceil(start/step),stop=Math.floor(stop/step),stop=Array(n=Math.ceil(stop-start+1));++i<n;)stop[i]=(start+i)*step;else for(step=-step,start=Math.ceil(start*step),stop=Math.floor(stop*step),stop=Array(n=Math.ceil(stop-start+1));++i<n;)stop[i]=(start+
i)/step;reverse&&stop.reverse();return stop}function tickIncrement(start,stop,count){stop=(stop-start)/Math.max(0,count);start=Math.floor(Math.log(stop)/Math.LN10);stop/=Math.pow(10,start);return 0<=start?(stop>=e10?10:stop>=e5?5:stop>=e2?2:1)*Math.pow(10,start):-Math.pow(10,-start)/(stop>=e10?10:stop>=e5?5:stop>=e2?2:1)}function nice(start,stop,count){for(var prestep;;){var step=tickIncrement(start,stop,count);if(step===prestep||0===step||!isFinite(step))return[start,stop];0<step?(start=Math.floor(start/
step)*step,stop=Math.ceil(stop/step)*step):0>step&&(start=Math.ceil(start*step)/step,stop=Math.floor(stop*step)/step);prestep=step}}function sturges(values){return Math.ceil(Math.log(count$jscomp$0(values))/Math.LN2)+1}function bin(){function histogram(data){Array.isArray(data)||(data=Array.from(data));var i,n=data.length,values=Array(n);for(i=0;i<n;++i)values[i]=value(data[i],i,data);var xz=domain(values),x0=xz[0];xz=xz[1];var tz=threshold(values,x0,xz);if(!Array.isArray(tz)){i=xz;var tn=+tz;domain===
extent&&(xz=$jscomp.makeIterator(nice(x0,xz,tn)),x0=xz.next().value,xz=xz.next().value);tz=ticks(x0,xz,tn);tz[tz.length-1]>=xz&&(i>=xz&&domain===extent?(i=tickIncrement(x0,xz,tn),isFinite(i)&&(0<i?xz=(Math.floor(xz/i)+1)*i:0>i&&(xz=(Math.ceil(xz*-i)+1)/-i))):tz.pop())}for(tn=tz.length;tz[0]<=x0;)tz.shift(),--tn;for(;tz[tn-1]>xz;)tz.pop(),--tn;var bins=Array(tn+1);for(i=0;i<=tn;++i){var x=bins[i]=[];x.x0=0<i?tz[i-1]:x0;x.x1=i<tn?tz[i]:xz}for(i=0;i<n;++i)x=values[i],x0<=x&&x<=xz&&bins[bisectRight(tz,
x,0,tn)].push(data[i]);return bins}var value=identity,domain=extent,threshold=sturges;histogram.value=function(_){return arguments.length?(value="function"===typeof _?_:constant(_),histogram):value};histogram.domain=function(_){return arguments.length?(domain="function"===typeof _?_:constant([_[0],_[1]]),histogram):domain};histogram.thresholds=function(_){return arguments.length?(threshold="function"===typeof _?_:Array.isArray(_)?constant(slice.call(_)):constant(_),histogram):threshold};return histogram}
function max$jscomp$0(values,valueof){var max;if(void 0===valueof){values=$jscomp.makeIterator(values);for(var $jscomp$key$value=values.next();!$jscomp$key$value.done;$jscomp$key$value=values.next())valueof=$jscomp$key$value.value,null!=valueof&&(max<valueof||void 0===max&&valueof>=valueof)&&(max=valueof)}else{var index$212=-1,$jscomp$iter$18=$jscomp.makeIterator(values);for($jscomp$key$value=$jscomp$iter$18.next();!$jscomp$key$value.done;$jscomp$key$value=$jscomp$iter$18.next())$jscomp$key$value=
$jscomp$key$value.value,null!=($jscomp$key$value=valueof($jscomp$key$value,++index$212,values))&&(max<$jscomp$key$value||void 0===max&&$jscomp$key$value>=$jscomp$key$value)&&(max=$jscomp$key$value)}return max}function min$jscomp$0(values,valueof){var min;if(void 0===valueof){values=$jscomp.makeIterator(values);for(var $jscomp$key$value=values.next();!$jscomp$key$value.done;$jscomp$key$value=values.next())valueof=$jscomp$key$value.value,null!=valueof&&(min>valueof||void 0===min&&valueof>=valueof)&&
(min=valueof)}else{var index$214=-1,$jscomp$iter$20=$jscomp.makeIterator(values);for($jscomp$key$value=$jscomp$iter$20.next();!$jscomp$key$value.done;$jscomp$key$value=$jscomp$iter$20.next())$jscomp$key$value=$jscomp$key$value.value,null!=($jscomp$key$value=valueof($jscomp$key$value,++index$214,values))&&(min>$jscomp$key$value||void 0===min&&$jscomp$key$value>=$jscomp$key$value)&&(min=$jscomp$key$value)}return min}function quickselect(array,k,left,right,compare){left=void 0===left?0:left;right=void 0===
right?array.length-1:right;for(compare=void 0===compare?ascending:compare;right>left;){if(600<right-left){var n=right-left+1,m=k-left+1,z=Math.log(n),s=.5*Math.exp(2*z/3);z=.5*Math.sqrt(z*s*(n-s)/n)*(0>m-n/2?-1:1);quickselect(array,k,Math.max(left,Math.floor(k-m*s/n+z)),Math.min(right,Math.floor(k+(n-m)*s/n+z)),compare)}n=array[k];m=left;s=right;swap(array,left,k);for(0<compare(array[right],n)&&swap(array,left,right);m<s;){swap(array,m,s);++m;for(--s;0>compare(array[m],n);)++m;for(;0<compare(array[s],
n);)--s}0===compare(array[left],n)?swap(array,left,s):(++s,swap(array,s,right));s<=k&&(left=s+1);k<=s&&(right=s-1)}return array}function swap(array,i,j){var t=array[i];array[i]=array[j];array[j]=t}function quantile(values,p,valueof){values=Float64Array.from(numbers(values,valueof));if(valueof=values.length){if(0>=(p=+p)||2>valueof)return min$jscomp$0(values);if(1<=p)return max$jscomp$0(values);p*=valueof-1;valueof=Math.floor(p);var value0=max$jscomp$0(quickselect(values,valueof).subarray(0,valueof+
1));values=min$jscomp$0(values.subarray(valueof+1));return value0+(values-value0)*(p-valueof)}}function maxIndex$jscomp$0(values,valueof){var maxIndex=-1,index=-1;if(void 0===valueof){values=$jscomp.makeIterator(values);for(var $jscomp$key$value=values.next();!$jscomp$key$value.done;$jscomp$key$value=values.next())if(valueof=$jscomp$key$value.value,++index,null!=valueof&&(max<valueof||void 0===max&&valueof>=valueof)){var max=valueof;maxIndex=index}}else{var $jscomp$iter$22=$jscomp.makeIterator(values);
for($jscomp$key$value=$jscomp$iter$22.next();!$jscomp$key$value.done;$jscomp$key$value=$jscomp$iter$22.next())$jscomp$key$value=$jscomp$key$value.value,null!=($jscomp$key$value=valueof($jscomp$key$value,++index,values))&&(max<$jscomp$key$value||void 0===max&&$jscomp$key$value>=$jscomp$key$value)&&(max=$jscomp$key$value,maxIndex=index)}return maxIndex}function flatten(arrays){var $jscomp$iter$25,$jscomp$key$array,array$220;return $jscomp.generator.createGenerator(flatten,function($jscomp$generator$context){1==
$jscomp$generator$context.nextAddress&&($jscomp$iter$25=$jscomp.makeIterator(arrays),$jscomp$key$array=$jscomp$iter$25.next());if(3!=$jscomp$generator$context.nextAddress){if($jscomp$key$array.done)return $jscomp$generator$context.jumpTo(0);array$220=$jscomp$key$array.value;return $jscomp$generator$context.yieldAll(array$220,3)}$jscomp$key$array=$jscomp$iter$25.next();return $jscomp$generator$context.jumpTo(2)})}function minIndex(values,valueof){var minIndex=-1,index=-1;if(void 0===valueof){values=
$jscomp.makeIterator(values);for(var $jscomp$key$value=values.next();!$jscomp$key$value.done;$jscomp$key$value=values.next())if(valueof=$jscomp$key$value.value,++index,null!=valueof&&(min>valueof||void 0===min&&valueof>=valueof)){var min=valueof;minIndex=index}}else{var $jscomp$iter$27=$jscomp.makeIterator(values);for($jscomp$key$value=$jscomp$iter$27.next();!$jscomp$key$value.done;$jscomp$key$value=$jscomp$iter$27.next())$jscomp$key$value=$jscomp$key$value.value,null!=($jscomp$key$value=valueof($jscomp$key$value,
++index,values))&&(min>$jscomp$key$value||void 0===min&&$jscomp$key$value>=$jscomp$key$value)&&(min=$jscomp$key$value,minIndex=index)}return minIndex}function pair(a,b){return[a,b]}function leastIndex(values,compare){compare=void 0===compare?ascending:compare;if(1===compare.length)return minIndex(values,compare);var min=-1,index=-1;values=$jscomp.makeIterator(values);for(var $jscomp$key$value=values.next();!$jscomp$key$value.done;$jscomp$key$value=values.next())if($jscomp$key$value=$jscomp$key$value.value,
++index,0>min?0===compare($jscomp$key$value,$jscomp$key$value):0>compare($jscomp$key$value,minValue)){var minValue=$jscomp$key$value;min=index}return min}function shuffler(random){return function(array,i0,i1){i0=void 0===i0?0:i0;i1=void 0===i1?array.length:i1;for(i1-=i0=+i0;i1;){var i=random()*i1--|0,t$224=array[i1+i0];array[i1+i0]=array[i+i0];array[i+i0]=t$224}return array}}function transpose$jscomp$0(matrix){if(!(n=matrix.length))return[];for(var i=-1,m=min$jscomp$0(matrix,length$1),transpose=Array(m);++i<
m;)for(var j=-1,n,row=transpose[i]=Array(n);++j<n;)row[j]=matrix[j][i];return transpose}function length$1(d){return d.length}function set(values){return values instanceof Set?values:new Set(values)}function superset(values,other){var iterator=values[Symbol.iterator]();values=new Set;var $jscomp$loop$266={};other=$jscomp.makeIterator(other);for(var $jscomp$key$o=other.next();!$jscomp$key$o.done;$jscomp$loop$266={$jscomp$loop$prop$value$267:$jscomp$loop$266.$jscomp$loop$prop$value$267,$jscomp$loop$prop$done$268:$jscomp$loop$266.$jscomp$loop$prop$done$268},
$jscomp$key$o=other.next())if($jscomp$key$o=$jscomp$key$o.value,!values.has($jscomp$key$o))for($jscomp$loop$266.$jscomp$loop$prop$value$267=void 0,$jscomp$loop$266.$jscomp$loop$prop$done$268=void 0;function($jscomp$loop$266){return function(){var $jscomp$destructuring$var32=iterator.next();$jscomp$loop$266.$jscomp$loop$prop$value$267=$jscomp$destructuring$var32.value;$jscomp$loop$266.$jscomp$loop$prop$done$268=$jscomp$destructuring$var32.done;return $jscomp$destructuring$var32}}($jscomp$loop$266)();){if($jscomp$loop$266.$jscomp$loop$prop$done$268)return!1;
values.add($jscomp$loop$266.$jscomp$loop$prop$value$267);if(Object.is($jscomp$key$o,$jscomp$loop$266.$jscomp$loop$prop$value$267))break}return!0}var ascendingBisect=bisector(ascending),bisectRight=ascendingBisect.right;ascendingBisect=ascendingBisect.left;var bisectCenter=bisector(number).center,Adder=function(){this._partials=new Float64Array(32);this._n=0};Adder.prototype.add=function(x){for(var p=this._partials,i=0,j=0;j<this._n&&32>j;j++){var y=p[j],hi=x+y;(x=Math.abs(x)<Math.abs(y)?x-(hi-y):
y-(hi-x))&&(p[i++]=x);x=hi}p[i]=x;this._n=i+1;return this};Adder.prototype.valueOf=function(){var p=this._partials,n=this._n,hi=0;if(0<n){for(hi=p[--n];0<n;){var x=hi;var y=p[--n];hi=x+y;if(x=y-(hi-x))break}0<n&&(0>x&&0>p[n-1]||0<x&&0<p[n-1])&&(y=2*x,x=hi+y,y==x-hi&&(hi=x))}return hi};var InternMap=function(entries,key){entries=void 0===entries?[]:entries;key=void 0===key?keyof:key;var $jscomp$super$this=$jscomp.construct(Map,[],this.constructor);Object.defineProperties($jscomp$super$this,{_intern:{value:new Map},
_key:{value:key}});entries=$jscomp.makeIterator(entries);for(key=entries.next();!key.done;key=entries.next()){var $jscomp$destructuring$var5=$jscomp.makeIterator(key.value);key=$jscomp$destructuring$var5.next().value;$jscomp$destructuring$var5=$jscomp$destructuring$var5.next().value;$jscomp$super$this.set(key,$jscomp$destructuring$var5)}return $jscomp$super$this};$jscomp.inherits(InternMap,Map);InternMap.prototype.get=function(key){return Map.prototype.get.call(this,intern_get(this,key))};InternMap.prototype.has=
function(key){return Map.prototype.has.call(this,intern_get(this,key))};InternMap.prototype.set=function(key,value){return Map.prototype.set.call(this,intern_set(this,key),value)};InternMap.prototype.delete=function(key){return Map.prototype.delete.call(this,intern_delete(this,key))};var InternSet=function(values,key){values=void 0===values?[]:values;key=void 0===key?keyof:key;var $jscomp$super$this=$jscomp.construct(Set,[],this.constructor);Object.defineProperties($jscomp$super$this,{_intern:{value:new Map},
_key:{value:key}});values=$jscomp.makeIterator(values);for(key=values.next();!key.done;key=values.next())$jscomp$super$this.add(key.value);return $jscomp$super$this};$jscomp.inherits(InternSet,Set);InternSet.prototype.has=function(value){return Set.prototype.has.call(this,intern_get(this,value))};InternSet.prototype.add=function(value){return Set.prototype.add.call(this,intern_set(this,value))};InternSet.prototype.delete=function(value){return Set.prototype.delete.call(this,intern_delete(this,value))};
var slice=Array.prototype.slice,e10=Math.sqrt(50),e5=Math.sqrt(10),e2=Math.sqrt(2),shuffle=shuffler(Math.random);exports.Adder=Adder;exports.InternMap=InternMap;exports.InternSet=InternSet;exports.ascending=ascending;exports.bin=bin;exports.bisect=bisectRight;exports.bisectCenter=bisectCenter;exports.bisectLeft=ascendingBisect;exports.bisectRight=bisectRight;exports.bisector=bisector;exports.count=count$jscomp$0;exports.cross=function(values){for(var $jscomp$restParams=[],$jscomp$restIndex=0;$jscomp$restIndex<
arguments.length;++$jscomp$restIndex)$jscomp$restParams[$jscomp$restIndex-0]=arguments[$jscomp$restIndex];var values$189=$jscomp$restParams;$jscomp$restParams="function"===typeof values$189[values$189.length-1]&&reducer$jscomp$0(values$189.pop());values$189=values$189.map(arrayify);$jscomp$restIndex=values$189.map(length$jscomp$0);var j$jscomp$0=values$189.length-1,index$191=Array(j$jscomp$0+1).fill(0),product=[];if(0>j$jscomp$0||$jscomp$restIndex.some(empty))return product;for(;;){product.push(index$191.map(function(j,
i){return values$189[i][j]}));for(var i$jscomp$0=j$jscomp$0;++index$191[i$jscomp$0]===$jscomp$restIndex[i$jscomp$0];){if(0===i$jscomp$0)return $jscomp$restParams?product.map($jscomp$restParams):product;index$191[i$jscomp$0--]=0}}};exports.cumsum=function(values,valueof){var sum=0,index=0;return Float64Array.from(values,void 0===valueof?function(v){return sum+=+v||0}:function(v){return sum+=+valueof(v,index++,values)||0})};exports.descending=function(a,b){return b<a?-1:b>a?1:b>=a?0:NaN};exports.deviation=
deviation;exports.difference=function(values,others){for(var $jscomp$restParams=[],$jscomp$restIndex=1;$jscomp$restIndex<arguments.length;++$jscomp$restIndex)$jscomp$restParams[$jscomp$restIndex-1]=arguments[$jscomp$restIndex];values=new Set(values);$jscomp$restParams=$jscomp.makeIterator($jscomp$restParams);for($jscomp$restIndex=$jscomp$restParams.next();!$jscomp$restIndex.done;$jscomp$restIndex=$jscomp$restParams.next()){$jscomp$restIndex=$jscomp.makeIterator($jscomp$restIndex.value);for(var $jscomp$key$value=
$jscomp$restIndex.next();!$jscomp$key$value.done;$jscomp$key$value=$jscomp$restIndex.next())values.delete($jscomp$key$value.value)}return values};exports.disjoint=function(values,other){var iterator=other[Symbol.iterator]();other=new Set;var $jscomp$loop$263={};values=$jscomp.makeIterator(values);for(var $jscomp$key$v=values.next();!$jscomp$key$v.done;$jscomp$loop$263={$jscomp$loop$prop$value$264:$jscomp$loop$263.$jscomp$loop$prop$value$264,$jscomp$loop$prop$done$265:$jscomp$loop$263.$jscomp$loop$prop$done$265},
$jscomp$key$v=values.next()){$jscomp$key$v=$jscomp$key$v.value;if(other.has($jscomp$key$v))return!1;$jscomp$loop$263.$jscomp$loop$prop$value$264=void 0;for($jscomp$loop$263.$jscomp$loop$prop$done$265=void 0;function($jscomp$loop$263){return function(){var $jscomp$destructuring$var30=iterator.next();$jscomp$loop$263.$jscomp$loop$prop$value$264=$jscomp$destructuring$var30.value;$jscomp$loop$263.$jscomp$loop$prop$done$265=$jscomp$destructuring$var30.done;return $jscomp$destructuring$var30}}($jscomp$loop$263)()&&
!$jscomp$loop$263.$jscomp$loop$prop$done$265;){if(Object.is($jscomp$key$v,$jscomp$loop$263.$jscomp$loop$prop$value$264))return!1;other.add($jscomp$loop$263.$jscomp$loop$prop$value$264)}}return!0};exports.every=function(values,test){if("function"!==typeof test)throw new TypeError("test is not a function");for(var index=-1,$jscomp$iter$37=$jscomp.makeIterator(values),$jscomp$key$value=$jscomp$iter$37.next();!$jscomp$key$value.done;$jscomp$key$value=$jscomp$iter$37.next())if(!test($jscomp$key$value.value,
++index,values))return!1;return!0};exports.extent=extent;exports.filter=function(values,test){if("function"!==typeof test)throw new TypeError("test is not a function");for(var array=[],index=-1,$jscomp$iter$39=$jscomp.makeIterator(values),$jscomp$key$value=$jscomp$iter$39.next();!$jscomp$key$value.done;$jscomp$key$value=$jscomp$iter$39.next())$jscomp$key$value=$jscomp$key$value.value,test($jscomp$key$value,++index,values)&&array.push($jscomp$key$value);return array};exports.fsum=function(values,valueof){var adder=
new Adder;if(void 0===valueof){values=$jscomp.makeIterator(values);for(var $jscomp$key$value=values.next();!$jscomp$key$value.done;$jscomp$key$value=values.next())valueof=$jscomp$key$value.value,(valueof=+valueof)&&adder.add(valueof)}else{var index$196=-1,$jscomp$iter$11=$jscomp.makeIterator(values);for($jscomp$key$value=$jscomp$iter$11.next();!$jscomp$key$value.done;$jscomp$key$value=$jscomp$iter$11.next())$jscomp$key$value=$jscomp$key$value.value,($jscomp$key$value=+valueof($jscomp$key$value,++index$196,
values))&&adder.add($jscomp$key$value)}return+adder};exports.greatest=function(values,compare){compare=void 0===compare?ascending:compare;var defined=!1;if(1===compare.length){values=$jscomp.makeIterator(values);for(var $jscomp$key$element=values.next();!$jscomp$key$element.done;$jscomp$key$element=values.next()){$jscomp$key$element=$jscomp$key$element.value;var value=compare($jscomp$key$element);if(defined?0<ascending(value,maxValue):0===ascending(value,value)){var max=$jscomp$key$element;var maxValue=
value;defined=!0}}}else for(maxValue=$jscomp.makeIterator(values),values=maxValue.next();!values.done;values=maxValue.next())if(values=values.value,defined?0<compare(values,max):0===compare(values,values))max=values,defined=!0;return max};exports.greatestIndex=function(values,compare){compare=void 0===compare?ascending:compare;if(1===compare.length)return maxIndex$jscomp$0(values,compare);var max=-1,index=-1;values=$jscomp.makeIterator(values);for(var $jscomp$key$value=values.next();!$jscomp$key$value.done;$jscomp$key$value=
values.next())if($jscomp$key$value=$jscomp$key$value.value,++index,0>max?0===compare($jscomp$key$value,$jscomp$key$value):0<compare($jscomp$key$value,maxValue)){var maxValue=$jscomp$key$value;max=index}return max};exports.group=group;exports.groupSort=function(values,reduce,key){return(1===reduce.length?sort(rollup(values,reduce,key),function($jscomp$destructuring$var16,$jscomp$destructuring$var17){var $jscomp$destructuring$var18=$jscomp.makeIterator($jscomp$destructuring$var16);$jscomp$destructuring$var16=
$jscomp$destructuring$var18.next().value;$jscomp$destructuring$var18=$jscomp$destructuring$var18.next().value;var $jscomp$destructuring$var19=$jscomp.makeIterator($jscomp$destructuring$var17);$jscomp$destructuring$var17=$jscomp$destructuring$var19.next().value;$jscomp$destructuring$var19=$jscomp$destructuring$var19.next().value;return ascending($jscomp$destructuring$var18,$jscomp$destructuring$var19)||ascending($jscomp$destructuring$var16,$jscomp$destructuring$var17)}):sort(group(values,key),function($jscomp$destructuring$var20,
$jscomp$destructuring$var21){var $jscomp$destructuring$var22=$jscomp.makeIterator($jscomp$destructuring$var20);$jscomp$destructuring$var20=$jscomp$destructuring$var22.next().value;$jscomp$destructuring$var22=$jscomp$destructuring$var22.next().value;var $jscomp$destructuring$var23=$jscomp.makeIterator($jscomp$destructuring$var21);$jscomp$destructuring$var21=$jscomp$destructuring$var23.next().value;$jscomp$destructuring$var23=$jscomp$destructuring$var23.next().value;return reduce($jscomp$destructuring$var22,
$jscomp$destructuring$var23)||ascending($jscomp$destructuring$var20,$jscomp$destructuring$var21)})).map(function($jscomp$destructuring$var24){return $jscomp.makeIterator($jscomp$destructuring$var24).next().value})};exports.groups=function(values,keys){for(var $jscomp$restParams=[],$jscomp$restIndex=1;$jscomp$restIndex<arguments.length;++$jscomp$restIndex)$jscomp$restParams[$jscomp$restIndex-1]=arguments[$jscomp$restIndex];return nest(values,Array.from,identity,$jscomp$restParams)};exports.histogram=
bin;exports.index=function(values,keys){for(var $jscomp$restParams=[],$jscomp$restIndex=1;$jscomp$restIndex<arguments.length;++$jscomp$restIndex)$jscomp$restParams[$jscomp$restIndex-1]=arguments[$jscomp$restIndex];return nest(values,identity,unique,$jscomp$restParams)};exports.indexes=function(values,keys){for(var $jscomp$restParams=[],$jscomp$restIndex=1;$jscomp$restIndex<arguments.length;++$jscomp$restIndex)$jscomp$restParams[$jscomp$restIndex-1]=arguments[$jscomp$restIndex];return nest(values,
Array.from,unique,$jscomp$restParams)};exports.intersection=function(values,others){for(var $jscomp$restParams=[],$jscomp$restIndex=1;$jscomp$restIndex<arguments.length;++$jscomp$restIndex)$jscomp$restParams[$jscomp$restIndex-1]=arguments[$jscomp$restIndex];values=new Set(values);$jscomp$restParams=$jscomp$restParams.map(set);$jscomp$restIndex=$jscomp.makeIterator(values);var $jscomp$key$value=$jscomp$restIndex.next();a:for(;!$jscomp$key$value.done;$jscomp$key$value=$jscomp$restIndex.next()){$jscomp$key$value=
$jscomp$key$value.value;for(var $jscomp$iter$43=$jscomp.makeIterator($jscomp$restParams),$jscomp$key$other=$jscomp$iter$43.next();!$jscomp$key$other.done;$jscomp$key$other=$jscomp$iter$43.next())if(!$jscomp$key$other.value.has($jscomp$key$value)){values.delete($jscomp$key$value);continue a}}return values};exports.least=function(values,compare){compare=void 0===compare?ascending:compare;var defined=!1;if(1===compare.length){values=$jscomp.makeIterator(values);for(var $jscomp$key$element=values.next();!$jscomp$key$element.done;$jscomp$key$element=
values.next()){$jscomp$key$element=$jscomp$key$element.value;var value=compare($jscomp$key$element);if(defined?0>ascending(value,minValue):0===ascending(value,value)){var min=$jscomp$key$element;var minValue=value;defined=!0}}}else for(minValue=$jscomp.makeIterator(values),values=minValue.next();!values.done;values=minValue.next())if(values=values.value,defined?0>compare(values,min):0===compare(values,values))min=values,defined=!0;return min};exports.leastIndex=leastIndex;exports.map=function(values,
mapper){if("function"!==typeof values[Symbol.iterator])throw new TypeError("values is not iterable");if("function"!==typeof mapper)throw new TypeError("mapper is not a function");return Array.from(values,function(value,index){return mapper(value,index,values)})};exports.max=max$jscomp$0;exports.maxIndex=maxIndex$jscomp$0;exports.mean=function(values,valueof){var count=0,sum=0;if(void 0===valueof){values=$jscomp.makeIterator(values);for(var $jscomp$key$value=values.next();!$jscomp$key$value.done;$jscomp$key$value=
values.next())valueof=$jscomp$key$value.value,null!=valueof&&(valueof=+valueof)>=valueof&&(++count,sum+=valueof)}else{var index$218=-1,$jscomp$iter$24=$jscomp.makeIterator(values);for($jscomp$key$value=$jscomp$iter$24.next();!$jscomp$key$value.done;$jscomp$key$value=$jscomp$iter$24.next())$jscomp$key$value=$jscomp$key$value.value,null!=($jscomp$key$value=valueof($jscomp$key$value,++index$218,values))&&($jscomp$key$value=+$jscomp$key$value)>=$jscomp$key$value&&(++count,sum+=$jscomp$key$value)}if(count)return sum/
count};exports.median=function(values,valueof){return quantile(values,.5,valueof)};exports.merge=function(arrays){return Array.from(flatten(arrays))};exports.min=min$jscomp$0;exports.minIndex=minIndex;exports.nice=nice;exports.pairs=function(values,pairof){pairof=void 0===pairof?pair:pairof;var pairs=[],first=!1;values=$jscomp.makeIterator(values);for(var $jscomp$key$value=values.next();!$jscomp$key$value.done;$jscomp$key$value=values.next()){$jscomp$key$value=$jscomp$key$value.value;first&&pairs.push(pairof(previous,
$jscomp$key$value));var previous=$jscomp$key$value;first=!0}return pairs};exports.permute=permute;exports.quantile=quantile;exports.quantileSorted=function(values,p,valueof){valueof=void 0===valueof?number:valueof;if(n=values.length){if(0>=(p=+p)||2>n)return+valueof(values[0],0,values);if(1<=p)return+valueof(values[n-1],n-1,values);var n;p*=n-1;n=Math.floor(p);var value0=+valueof(values[n],n,values);values=+valueof(values[n+1],n+1,values);return value0+(values-value0)*(p-n)}};exports.quickselect=
quickselect;exports.range=function(start,stop,step){start=+start;stop=+stop;step=2>(n=arguments.length)?(stop=start,start=0,1):3>n?1:+step;for(var i=-1,n=Math.max(0,Math.ceil((stop-start)/step))|0,range=Array(n);++i<n;)range[i]=start+i*step;return range};exports.reduce=function(values,reducer,value){if("function"!==typeof reducer)throw new TypeError("reducer is not a function");var iterator=values[Symbol.iterator](),next,index=-1;if(3>arguments.length){var $jscomp$destructuring$var27=iterator.next();
var done=$jscomp$destructuring$var27.done;value=$jscomp$destructuring$var27.value;if(done)return;++index}for(;function(){var $jscomp$destructuring$var28=iterator.next();done=$jscomp$destructuring$var28.done;next=$jscomp$destructuring$var28.value;return $jscomp$destructuring$var28}(),!done;)value=reducer(value,next,++index,values);return value};exports.reverse=function(values){if("function"!==typeof values[Symbol.iterator])throw new TypeError("values is not iterable");return Array.from(values).reverse()};
exports.rollup=rollup;exports.rollups=function(values,reduce,keys){for(var $jscomp$restParams=[],$jscomp$restIndex=2;$jscomp$restIndex<arguments.length;++$jscomp$restIndex)$jscomp$restParams[$jscomp$restIndex-2]=arguments[$jscomp$restIndex];return nest(values,Array.from,reduce,$jscomp$restParams)};exports.scan=function(values,compare){values=leastIndex(values,compare);return 0>values?void 0:values};exports.shuffle=shuffle;exports.shuffler=shuffler;exports.some=function(values,test){if("function"!==
typeof test)throw new TypeError("test is not a function");for(var index=-1,$jscomp$iter$38=$jscomp.makeIterator(values),$jscomp$key$value=$jscomp$iter$38.next();!$jscomp$key$value.done;$jscomp$key$value=$jscomp$iter$38.next())if(test($jscomp$key$value.value,++index,values))return!0;return!1};exports.sort=sort;exports.subset=function(values,other){return superset(other,values)};exports.sum=function(values,valueof){var sum=0;if(void 0===valueof){values=$jscomp.makeIterator(values);for(var $jscomp$key$value=
values.next();!$jscomp$key$value.done;$jscomp$key$value=values.next())if(valueof=$jscomp$key$value.value,valueof=+valueof)sum+=valueof}else{var index$225=-1,$jscomp$iter$36=$jscomp.makeIterator(values);for($jscomp$key$value=$jscomp$iter$36.next();!$jscomp$key$value.done;$jscomp$key$value=$jscomp$iter$36.next())if($jscomp$key$value=$jscomp$key$value.value,$jscomp$key$value=+valueof($jscomp$key$value,++index$225,values))sum+=$jscomp$key$value}return sum};exports.superset=superset;exports.thresholdFreedmanDiaconis=
function(values,min,max){return Math.ceil((max-min)/(2*(quantile(values,.75)-quantile(values,.25))*Math.pow(count$jscomp$0(values),-1/3)))};exports.thresholdScott=function(values,min,max){return Math.ceil((max-min)/(3.5*deviation(values)*Math.pow(count$jscomp$0(values),-1/3)))};exports.thresholdSturges=sturges;exports.tickIncrement=tickIncrement;exports.tickStep=function(start,stop,count){var step0=Math.abs(stop-start)/Math.max(0,count);count=Math.pow(10,Math.floor(Math.log(step0)/Math.LN10));step0/=
count;step0>=e10?count*=10:step0>=e5?count*=5:step0>=e2&&(count*=2);return stop<start?-count:count};exports.ticks=ticks;exports.transpose=transpose$jscomp$0;exports.union=function(others){for(var $jscomp$restParams=[],$jscomp$restIndex=0;$jscomp$restIndex<arguments.length;++$jscomp$restIndex)$jscomp$restParams[$jscomp$restIndex-0]=arguments[$jscomp$restIndex];$jscomp$restIndex=new Set;$jscomp$restParams=$jscomp.makeIterator($jscomp$restParams);for(var $jscomp$key$other=$jscomp$restParams.next();!$jscomp$key$other.done;$jscomp$key$other=
$jscomp$restParams.next()){$jscomp$key$other=$jscomp.makeIterator($jscomp$key$other.value);for(var $jscomp$key$o=$jscomp$key$other.next();!$jscomp$key$o.done;$jscomp$key$o=$jscomp$key$other.next())$jscomp$restIndex.add($jscomp$key$o.value)}return $jscomp$restIndex};exports.variance=variance;exports.zip=function(){return transpose$jscomp$0(arguments)};Object.defineProperty(exports,"__esModule",{value:!0})})}
//# sourceMappingURL=module$node_modules$d3_array$dist$d3_array.js.map
