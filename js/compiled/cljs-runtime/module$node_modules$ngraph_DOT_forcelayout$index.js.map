{
"version":3,
"file":"module$node_modules$ngraph_DOT_forcelayout$index.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/ngraph_DOT_forcelayout/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ngraph_DOT_forcelayout$index\"] = function(global,require,module,exports) {\nmodule.exports = createLayout;\nmodule.exports.simulator = require('./lib/createPhysicsSimulator');\n\nvar eventify = require('ngraph.events');\n\n/**\n * Creates force based layout for a given graph.\n *\n * @param {ngraph.graph} graph which needs to be laid out\n * @param {object} physicsSettings if you need custom settings\n * for physics simulator you can pass your own settings here. If it's not passed\n * a default one will be created.\n */\nfunction createLayout(graph, physicsSettings) {\n  if (!graph) {\n    throw new Error('Graph structure cannot be undefined');\n  }\n\n  var createSimulator = (physicsSettings && physicsSettings.createSimulator) || require('./lib/createPhysicsSimulator');\n  var physicsSimulator = createSimulator(physicsSettings);\n  if (Array.isArray(physicsSettings)) throw new Error('Physics settings is expected to be an object');\n\n  var nodeMass = defaultNodeMass;\n  if (physicsSettings && typeof physicsSettings.nodeMass === 'function') {\n    nodeMass = physicsSettings.nodeMass\n  }\n\n  var nodeBodies = new Map();\n  var springs = {};\n  var bodiesCount = 0;\n\n  var springTransform = physicsSimulator.settings.springTransform || noop;\n\n  // Initialize physics with what we have in the graph:\n  initPhysics();\n  listenToEvents();\n\n  var wasStable = false;\n\n  var api = {\n    /**\n     * Performs one step of iterative layout algorithm\n     *\n     * @returns {boolean} true if the system should be considered stable; False otherwise.\n     * The system is stable if no further call to `step()` can improve the layout.\n     */\n    step: function() {\n      if (bodiesCount === 0) {\n        updateStableStatus(true);\n        return true;\n      }\n\n      var lastMove = physicsSimulator.step();\n\n      // Save the movement in case if someone wants to query it in the step\n      // callback.\n      api.lastMove = lastMove;\n\n      // Allow listeners to perform low-level actions after nodes are updated.\n      api.fire('step');\n\n      var ratio = lastMove/bodiesCount;\n      var isStableNow = ratio <= 0.01; // TODO: The number is somewhat arbitrary...\n      updateStableStatus(isStableNow);\n\n\n      return isStableNow;\n    },\n\n    /**\n     * For a given `nodeId` returns position\n     */\n    getNodePosition: function (nodeId) {\n      return getInitializedBody(nodeId).pos;\n    },\n\n    /**\n     * Sets position of a node to a given coordinates\n     * @param {string} nodeId node identifier\n     * @param {number} x position of a node\n     * @param {number} y position of a node\n     * @param {number=} z position of node (only if applicable to body)\n     */\n    setNodePosition: function (nodeId) {\n      var body = getInitializedBody(nodeId);\n      body.setPosition.apply(body, Array.prototype.slice.call(arguments, 1));\n    },\n\n    /**\n     * @returns {Object} Link position by link id\n     * @returns {Object.from} {x, y} coordinates of link start\n     * @returns {Object.to} {x, y} coordinates of link end\n     */\n    getLinkPosition: function (linkId) {\n      var spring = springs[linkId];\n      if (spring) {\n        return {\n          from: spring.from.pos,\n          to: spring.to.pos\n        };\n      }\n    },\n\n    /**\n     * @returns {Object} area required to fit in the graph. Object contains\n     * `x1`, `y1` - top left coordinates\n     * `x2`, `y2` - bottom right coordinates\n     */\n    getGraphRect: function () {\n      return physicsSimulator.getBBox();\n    },\n\n    /**\n     * Iterates over each body in the layout simulator and performs a callback(body, nodeId)\n     */\n    forEachBody: forEachBody,\n\n    /*\n     * Requests layout algorithm to pin/unpin node to its current position\n     * Pinned nodes should not be affected by layout algorithm and always\n     * remain at their position\n     */\n    pinNode: function (node, isPinned) {\n      var body = getInitializedBody(node.id);\n       body.isPinned = !!isPinned;\n    },\n\n    /**\n     * Checks whether given graph's node is currently pinned\n     */\n    isNodePinned: function (node) {\n      return getInitializedBody(node.id).isPinned;\n    },\n\n    /**\n     * Request to release all resources\n     */\n    dispose: function() {\n      graph.off('changed', onGraphChanged);\n      api.fire('disposed');\n    },\n\n    /**\n     * Gets physical body for a given node id. If node is not found undefined\n     * value is returned.\n     */\n    getBody: getBody,\n\n    /**\n     * Gets spring for a given edge.\n     *\n     * @param {string} linkId link identifer. If two arguments are passed then\n     * this argument is treated as formNodeId\n     * @param {string=} toId when defined this parameter denotes head of the link\n     * and first argument is treated as tail of the link (fromId)\n     */\n    getSpring: getSpring,\n\n    /**\n     * Returns length of cumulative force vector. The closer this to zero - the more stable the system is\n     */\n    getForceVectorLength: getForceVectorLength,\n\n    /**\n     * [Read only] Gets current physics simulator\n     */\n    simulator: physicsSimulator,\n\n    /**\n     * Gets the graph that was used for layout\n     */\n    graph: graph,\n\n    /**\n     * Gets amount of movement performed during last step operation\n     */\n    lastMove: 0\n  };\n\n  eventify(api);\n\n  return api;\n\n  function updateStableStatus(isStableNow) {\n    if (wasStable !== isStableNow) {\n      wasStable = isStableNow;\n      onStableChanged(isStableNow);\n    }\n  }\n\n  function forEachBody(cb) {\n    nodeBodies.forEach(function(body, bodyId) {\n      cb(body, bodyId);\n    })\n  }\n\n  function getForceVectorLength() {\n    var fx = 0, fy = 0;\n    forEachBody(function(body) {\n      fx += Math.abs(body.force.x);\n      fy += Math.abs(body.force.y);\n    });\n    return Math.sqrt(fx * fx + fy * fy);\n  }\n\n  function getSpring(fromId, toId) {\n    var linkId;\n    if (toId === undefined) {\n      if (typeof fromId !== 'object') {\n        // assume fromId as a linkId:\n        linkId = fromId;\n      } else {\n        // assume fromId to be a link object:\n        linkId = fromId.id;\n      }\n    } else {\n      // toId is defined, should grab link:\n      var link = graph.hasLink(fromId, toId);\n      if (!link) return;\n      linkId = link.id;\n    }\n\n    return springs[linkId];\n  }\n\n  function getBody(nodeId) {\n    return nodeBodies.get(nodeId);\n  }\n\n  function listenToEvents() {\n    graph.on('changed', onGraphChanged);\n  }\n\n  function onStableChanged(isStable) {\n    api.fire('stable', isStable);\n  }\n\n  function onGraphChanged(changes) {\n    for (var i = 0; i < changes.length; ++i) {\n      var change = changes[i];\n      if (change.changeType === 'add') {\n        if (change.node) {\n          initBody(change.node.id);\n        }\n        if (change.link) {\n          initLink(change.link);\n        }\n      } else if (change.changeType === 'remove') {\n        if (change.node) {\n          releaseNode(change.node);\n        }\n        if (change.link) {\n          releaseLink(change.link);\n        }\n      }\n    }\n    bodiesCount = graph.getNodesCount();\n  }\n\n  function initPhysics() {\n    bodiesCount = 0;\n\n    graph.forEachNode(function (node) {\n      initBody(node.id);\n      bodiesCount += 1;\n    });\n\n    graph.forEachLink(initLink);\n  }\n\n  function initBody(nodeId) {\n    var body = nodeBodies.get(nodeId);\n    if (!body) {\n      var node = graph.getNode(nodeId);\n      if (!node) {\n        throw new Error('initBody() was called with unknown node id');\n      }\n\n      var pos = node.position;\n      if (!pos) {\n        var neighbors = getNeighborBodies(node);\n        pos = physicsSimulator.getBestNewBodyPosition(neighbors);\n      }\n\n      body = physicsSimulator.addBodyAt(pos);\n      body.id = nodeId;\n\n      nodeBodies.set(nodeId, body);\n      updateBodyMass(nodeId);\n\n      if (isNodeOriginallyPinned(node)) {\n        body.isPinned = true;\n      }\n    }\n  }\n\n  function releaseNode(node) {\n    var nodeId = node.id;\n    var body = nodeBodies.get(nodeId);\n    if (body) {\n      nodeBodies.delete(nodeId);\n      physicsSimulator.removeBody(body);\n    }\n  }\n\n  function initLink(link) {\n    updateBodyMass(link.fromId);\n    updateBodyMass(link.toId);\n\n    var fromBody = nodeBodies.get(link.fromId),\n        toBody  = nodeBodies.get(link.toId),\n        spring = physicsSimulator.addSpring(fromBody, toBody, link.length);\n\n    springTransform(link, spring);\n\n    springs[link.id] = spring;\n  }\n\n  function releaseLink(link) {\n    var spring = springs[link.id];\n    if (spring) {\n      var from = graph.getNode(link.fromId),\n          to = graph.getNode(link.toId);\n\n      if (from) updateBodyMass(from.id);\n      if (to) updateBodyMass(to.id);\n\n      delete springs[link.id];\n\n      physicsSimulator.removeSpring(spring);\n    }\n  }\n\n  function getNeighborBodies(node) {\n    // TODO: Could probably be done better on memory\n    var neighbors = [];\n    if (!node.links) {\n      return neighbors;\n    }\n    var maxNeighbors = Math.min(node.links.length, 2);\n    for (var i = 0; i < maxNeighbors; ++i) {\n      var link = node.links[i];\n      var otherBody = link.fromId !== node.id ? nodeBodies.get(link.fromId) : nodeBodies.get(link.toId);\n      if (otherBody && otherBody.pos) {\n        neighbors.push(otherBody);\n      }\n    }\n\n    return neighbors;\n  }\n\n  function updateBodyMass(nodeId) {\n    var body = nodeBodies.get(nodeId);\n    body.mass = nodeMass(nodeId);\n    if (Number.isNaN(body.mass)) {\n      throw new Error('Node mass should be a number')\n    }\n  }\n\n  /**\n   * Checks whether graph node has in its settings pinned attribute,\n   * which means layout algorithm cannot move it. Node can be marked\n   * as pinned, if it has \"isPinned\" attribute, or when node.data has it.\n   *\n   * @param {Object} node a graph node to check\n   * @return {Boolean} true if node should be treated as pinned; false otherwise.\n   */\n  function isNodeOriginallyPinned(node) {\n    return (node && (node.isPinned || (node.data && node.data.isPinned)));\n  }\n\n  function getInitializedBody(nodeId) {\n    var body = nodeBodies.get(nodeId);\n    if (!body) {\n      initBody(nodeId);\n      body = nodeBodies.get(nodeId);\n    }\n    return body;\n  }\n\n  /**\n   * Calculates mass of a body, which corresponds to node with given id.\n   *\n   * @param {String|Number} nodeId identifier of a node, for which body mass needs to be calculated\n   * @returns {Number} recommended mass of the body;\n   */\n  function defaultNodeMass(nodeId) {\n    var links = graph.getLinks(nodeId);\n    if (!links) return 1;\n    return 1 + links.length / 3.0;\n  }\n}\n\nfunction noop() { }\n\n};"],
"names":["shadow$provide","global","require","module","exports","noop","createLayout","graph","physicsSettings","forEachBody","cb","nodeBodies","forEach","body","bodyId","onGraphChanged","changes","i","length","change","changeType","node","initBody","id","link","initLink","nodeId","get","delete","physicsSimulator","removeBody","spring","springs","from","getNode","fromId","to","toId","updateBodyMass","removeSpring","bodiesCount","getNodesCount","Error","pos","position","neighbors","links","maxNeighbors","Math","min","otherBody","push","getBestNewBodyPosition","addBodyAt","set","isPinned","data","fromBody","toBody","addSpring","springTransform","mass","nodeMass","Number","isNaN","getInitializedBody","createSimulator","Array","isArray","defaultNodeMass","getLinks","Map","settings","initPhysics","forEachNode","forEachLink","on","wasStable","api","step","isStableNow","fire","lastMove","getNodePosition","setNodePosition","setPosition","apply","prototype","slice","call","arguments","getLinkPosition","linkId","getGraphRect","getBBox","pinNode","isNodePinned","dispose","off","getBody","getSpring","undefined","hasLink","getForceVectorLength","fx","fy","abs","force","x","y","sqrt","simulator","eventify"]
}
