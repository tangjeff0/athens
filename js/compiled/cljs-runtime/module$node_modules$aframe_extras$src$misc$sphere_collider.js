shadow$provide.module$node_modules$aframe_extras$src$misc$sphere_collider=function(global,require,module,exports){module.exports=AFRAME.registerComponent("sphere-collider",{schema:{objects:{default:""},state:{default:"collided"},radius:{default:.05},watch:{default:!0}},init:function(){this.observer=null;this.els=[];this.collisions=[];this.handleHit=this.handleHit.bind(this);this.handleHitEnd=this.handleHitEnd.bind(this)},remove:function(){this.pause()},play:function(){var sceneEl=this.el.sceneEl;
this.data.watch&&(this.observer=new MutationObserver(this.update.bind(this,null)),this.observer.observe(sceneEl,{childList:!0,subtree:!0}))},pause:function(){this.observer&&(this.observer.disconnect(),this.observer=null)},update:function(){var data=this.data;data=data.objects?this.el.sceneEl.querySelectorAll(data.objects):this.el.sceneEl.children;this.els=Array.prototype.slice.call(data)},tick:function(){var position=new THREE.Vector3,meshPosition=new THREE.Vector3,colliderScale=new THREE.Vector3,
size=new THREE.Vector3,box=new THREE.Box3,distanceMap=new Map;return function(){var el$jscomp$0=this.el,data=this.data,collisions=[];if(el$jscomp$0.getObject3D("mesh")){distanceMap.clear();el$jscomp$0.object3D.getWorldPosition(position);el$jscomp$0.object3D.getWorldScale(colliderScale);var colliderRadius=data.radius*Math.max.apply(null,colliderScale.toArray());this.els.forEach(function(el){var radius;if(el.isEntity&&(radius=el.getObject3D("mesh"))&&(box.setFromObject(radius).getSize(size),radius=
Math.max(size.x,size.y,size.z)/2,radius=Math.sqrt(2*radius*radius),box.getCenter(meshPosition),radius)){var distance=position.distanceTo(meshPosition);distance<radius+colliderRadius&&(collisions.push(el),distanceMap.set(el,distance))}});collisions.sort(function(a,b){return distanceMap.get(a)>distanceMap.get(b)?1:-1}).forEach(this.handleHit);0===collisions.length&&el$jscomp$0.emit("hit",{el:null});this.collisions.filter(function(el){return!distanceMap.has(el)}).forEach(this.handleHitEnd);this.collisions=
collisions}}}(),handleHit:function(targetEl){targetEl.emit("hit");targetEl.addState(this.data.state);this.el.emit("hit",{el:targetEl})},handleHitEnd:function(targetEl){targetEl.emit("hitend");targetEl.removeState(this.data.state);this.el.emit("hitend",{el:targetEl})}})}
//# sourceMappingURL=module$node_modules$aframe_extras$src$misc$sphere_collider.js.map
