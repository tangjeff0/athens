shadow$provide.module$node_modules$ngraph_DOT_forcelayout$lib$codeGenerators$generateCreateSpringForce=function(global,require,module,exports){function generateCreateSpringForceFunctionBody(dimension){dimension=createPatternBuilder(dimension);return"\n  if (!Number.isFinite(options.springCoefficient)) throw new Error('Spring coefficient is not a number');\n  if (!Number.isFinite(options.springLength)) throw new Error('Spring length is not a number');\n\n  return {\n    /**\n     * Updates forces acting on a spring\n     */\n    update: function (spring) {\n      var body1 \x3d spring.from;\n      var body2 \x3d spring.to;\n      var length \x3d spring.length \x3c 0 ? options.springLength : spring.length;\n      "+
dimension("var d{var} \x3d body2.pos.{var} - body1.pos.{var};",{indent:6})+"\n      var r \x3d Math.sqrt("+dimension("d{var} * d{var}",{join:" + "})+");\n\n      if (r \x3d\x3d\x3d 0) {\n        "+dimension("d{var} \x3d (random.nextDouble() - 0.5) / 50;",{indent:8})+"\n        r \x3d Math.sqrt("+dimension("d{var} * d{var}",{join:" + "})+");\n      }\n\n      var d \x3d r - length;\n      var coefficient \x3d ((spring.coefficient \x3e 0) ? spring.coefficient : options.springCoefficient) * d / r;\n\n      "+
dimension("body1.force.{var} +\x3d coefficient * d{var}",{indent:6})+";\n      body1.springCount +\x3d 1;\n      body1.springLength +\x3d r;\n\n      "+dimension("body2.force.{var} -\x3d coefficient * d{var}",{indent:6})+";\n      body2.springCount +\x3d 1;\n      body2.springLength +\x3d r;\n    }\n  };\n"}var createPatternBuilder=require("module$node_modules$ngraph_DOT_forcelayout$lib$codeGenerators$createPatternBuilder");module.exports=function(dimension){dimension=generateCreateSpringForceFunctionBody(dimension);
return new Function("options","random",dimension)};module.exports.generateCreateSpringForceFunctionBody=generateCreateSpringForceFunctionBody}
//# sourceMappingURL=module$node_modules$ngraph_DOT_forcelayout$lib$codeGenerators$generateCreateSpringForce.js.map
