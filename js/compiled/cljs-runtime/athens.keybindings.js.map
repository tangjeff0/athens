{"version":3,"sources":["athens/keybindings.cljs"],"mappings":"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","names":["athens.keybindings/modifier-keys","e","shift","meta","ctrl","alt","athens.keybindings/get-end-points","target","cljs.core.js__GT_clj","goog.dom.selection/getEndPoints","athens.keybindings/set-cursor-position","idx","goog.dom.selection/setCursorPosition","athens.keybindings/destruct-target","vec__61161","cljs.core.nth","value","start","end","selection","goog.dom.selection/getText","head","cljs.core.subs","tail","cljs.core.merge","athens.keybindings/destruct-key-down","key","key-code","event","modifiers","target-data","athens.keybindings/ARROW-KEYS","goog.events.KeyCodes/UP","goog.events.KeyCodes/LEFT","goog.events.KeyCodes/DOWN","goog.events.KeyCodes/RIGHT","athens.keybindings/arrow-key-direction","cljs.core/contains?","athens.keybindings/slash-options","js/module$node_modules$$material_ui$icons$index.Done","js/module$node_modules$$material_ui$icons$index.Timer","js/Date","cljs.core/clj->js","js/module$node_modules$$material_ui$icons$index.Today","athens.util.get_day","js/module$node_modules$$material_ui$icons$index.YouTube","js/module$node_modules$$material_ui$icons$index.DesktopWindows","athens.keybindings/filter-slash-options","query","clojure.string/blank?","cljs.core/filterv","p__61164","vec__61165","text","cljs.core/re-find","cljs.core/re-pattern","athens.keybindings/update-query","state","type","query-fn","G__61168","cljs.core/Keyword","js/Error","athens.db/search-in-block-content","athens.db/search-in-node-title","regex","G__61169","find","query-start-idx","cljs.core/count","new-query","results","cljs.core._EQ_","cljs.core/empty?","cljs.core.swap_BANG_","cljs.core/assoc","var_args","G__61171","athens.keybindings/auto-complete-slash","map__61172","cljs.core/deref","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","map__61173","vec__61174","index","_","expansion","pos","expand","cljs.core/fn?","start-idx","new-head","new-str","new-idx","item","map__61179","vec__61180","G__61185","athens.keybindings/auto-complete-hashtag","map__61186","map__61187","map__61188","title","uid","or__4126__auto__","map__61192","G__61195","athens.keybindings/auto-complete-inline","map__61196","map__61197","map__61198","vec__61199","block?","page?","head-pattern","tail-pattern","closing-str","replacement","replace-str","clojure.string/replace-first","matches","cljs.core/re-matches","after-closing-str","goog.dom.selection/setStart","map__61205","map__61206","vec__61208","athens.keybindings/block-start?","vec__61214","athens.keybindings/block-end?","map__61217","athens.keybindings/dec-cycle","min","max","athens.keybindings/inc-cycle","athens.keybindings/cycle-list","up?","down?","f","athens.keybindings/max-idx","coll","athens.keybindings/handle-arrow-key","map__61227","map__61228","map__61229","selection?","start?","end?","caret-position","textarea-height","top","height","rows","js/Math.round","row","js/Math.ceil","top-row?","bottom-row?","left?","right?","re-frame.core/dispatch","new-open-state","cur-index","min-index","max-index","next-index","container-el","goog.dom/getElement","target-el","athens.util/scroll-if-needed","athens.keybindings/handle-tab","_state","map__61234","d-key-down","selected-items","re_frame.core.subscribe","athens.keybindings/handle-escape","athens.keybindings/throttle-dispatch","p1__61238#","goog.functions/throttle","athens.keybindings/handle-enter","map__61239","map__61240","G__61243","athens.keybindings.auto_complete_slash","athens.keybindings.auto_complete_inline","athens.keybindings.auto_complete_hashtag","athens.util/shortcut-key?","first","new-tail","G__61244","athens.keybindings/PAIR-CHARS","athens.keybindings/surround","around","temp__5733__auto__","complement","athens.keybindings/handle-shortcuts","map__61245","cljs.core.not_EQ_","goog.events.KeyCodes/A","closest-node-page","closest-block-page","closest","block","athens.db/get-block","children","cljs.core.sort_by","cljs.core.mapv","goog.events.KeyCodes/Z","map__61247","local","previous","goog.events.KeyCodes/B","goog.dom.selection/setEnd","goog.events.KeyCodes/O","link","hashtag","block-ref","athens.db/transact-state-for-uid","and__4115__auto__","eid","athens.db/e-by-av","athens.db/v-by-ea","athens.router.navigate_uid","new-uid","athens.util/gen-block-uid","js/setTimeout","athens.keybindings/pair-char?","map__61249","pair-char-set","cljs.core/seq","cljs.core/flatten","cljs.core/set","athens.keybindings/handle-pair-char","map__61251","close-pair","lookbehind-char","four-char","double-brackets?","double-parens?","surround-selection","athens.keybindings/handle-backspace","map__61253","map__61254","no-selection?","sub-str","possible-pair","fexpr__61256","look-behind-char","athens.keybindings/is-character-key?","map__61258","cljs.core/not","goog.events.KeyCodes/isCharacterKey","athens.keybindings/write-char","map__61260","map__61261","athens.keybindings/handle-delete","map__61264","next-block-uid","athens.db.next_block_uid","next-block","athens.keybindings/textarea-key-down","map__61266","d-event","athens.util/get-caret-position","goog.events.KeyCodes/TAB","goog.events.KeyCodes/ENTER","goog.events.KeyCodes/BACKSPACE","goog.events.KeyCodes/DELETE","goog.events.KeyCodes/ESC"],"sourcesContent":["(ns athens.keybindings\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.db :as db]\n    [athens.router :as router]\n    [athens.util :refer [scroll-if-needed get-day get-caret-position shortcut-key?]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [clojure.string :refer [replace-first blank?]]\n    [goog.dom :refer [getElement]]\n    [goog.dom.selection :refer [setStart setEnd getText setCursorPosition getEndPoints]]\n    [goog.events.KeyCodes :refer [isCharacterKey]]\n    [goog.functions :refer [throttle]]\n    [re-frame.core :refer [dispatch subscribe]])\n  (:import\n    (goog.events\n      KeyCodes)))\n\n\n;;; Event Helpers\n\n\n(defn modifier-keys\n  [e]\n  (let [shift (.. e -shiftKey)\n        meta (.. e -metaKey)\n        ctrl (.. e -ctrlKey)\n        alt (.. e -altKey)]\n    {:shift shift :meta meta :ctrl ctrl :alt alt}))\n\n\n(defn get-end-points\n  [target]\n  (js->clj (getEndPoints target)))\n\n\n(defn set-cursor-position\n  [target idx]\n  (setCursorPosition target idx))\n\n\n(defn destruct-target\n  [target]\n  (let [value (.. target -value)\n        [start end] (get-end-points target)\n        selection (getText target)\n        head (subs value 0 start)\n        tail (subs value end)]\n    (merge {:value value}\n           {:start start :end end}\n           {:head head :tail tail}\n           {:selection selection})))\n\n\n(defn destruct-key-down\n  [e]\n  (let [key (.. e -key)\n        key-code (.. e -keyCode)\n        target (.. e -target)\n        value (.. target -value)\n        event {:key key :key-code key-code :target target :value value}\n        modifiers (modifier-keys e)\n        target-data (destruct-target target)]\n    (merge modifiers\n           event\n           target-data)))\n\n\n(def ARROW-KEYS\n  #{KeyCodes.UP\n    KeyCodes.LEFT\n    KeyCodes.DOWN\n    KeyCodes.RIGHT})\n\n\n(defn arrow-key-direction\n  [e]\n  (contains? ARROW-KEYS (.. e -keyCode)))\n\n\n;;; Dropdown: inline-search and slash commands\n\n;; TODO: some expansions require caret placement after\n(def slash-options\n  [[\"Add Todo\"      mui-icons/Done \"{{[[TODO]]}} \" \"cmd-enter\" nil]\n   [\"Current Time\"  mui-icons/Timer (fn [] (.. (js/Date.) (toLocaleTimeString [] (clj->js {\"timeStyle\" \"short\"})))) nil nil]\n   [\"Today\"         mui-icons/Today (fn [] (str \"[[\" (:title (get-day 0)) \"]] \")) nil nil]\n   [\"Tomorrow\"      mui-icons/Today (fn [] (str \"[[\" (:title (get-day -1)) \"]]\")) nil nil]\n   [\"Yesterday\"     mui-icons/Today (fn [] (str \"[[\" (:title (get-day 1)) \"]]\")) nil nil]\n   [\"YouTube Embed\" mui-icons/YouTube \"{{[[youtube]]: }}\" nil 2]\n   [\"iframe Embed\"  mui-icons/DesktopWindows \"{{iframe: }}\" nil 2]])\n\n;;[mui-icons/ \"Block Embed\" #(str \"[[\" (:title (get-day 1)) \"]]\")]\n;;[mui-icons/DateRange \"Date Picker\"]\n;;[mui-icons/Attachment \"Upload Image or File\"]\n;;[mui-icons/ExposurePlus1 \"Word Count\"]\n\n\n(defn filter-slash-options\n  [query]\n  (if (blank? query)\n    slash-options\n    (filterv (fn [[text]]\n               (re-find (re-pattern (str \"(?i)\" query)) text))\n             slash-options)))\n\n\n(defn update-query\n  \"Used by backspace and write-char.\n  write-char appends key character. Pass empty string during backspace.\n  query-start is determined by doing a greedy regex find up to head.\n  Head goes up to the text caret position.\"\n  [state head key type]\n  (let [query-fn        (case type\n                          :block db/search-in-block-content\n                          :page db/search-in-node-title\n                          :hashtag db/search-in-node-title\n                          :slash filter-slash-options)\n        regex           (case type\n                          :block #\"(?s).*\\(\\(\"\n                          :page #\"(?s).*\\[\\[\"\n                          :hashtag #\"(?s).*#\"\n                          :slash #\"(?s).*/\")\n        find            (re-find regex head)\n        query-start-idx (count find)\n        new-query       (str (subs head query-start-idx) key)\n        results         (query-fn new-query)]\n    (if (and (= type :slash) (empty? results))\n      (swap! state assoc :search/type nil)\n      (swap! state assoc\n             :search/index 0\n             :search/query new-query\n             :search/results results))))\n\n\n;; 1- if no results, just hide slash commands so this doesnt get triggered\n;; 2- if results, do find and replace properly\n(defn auto-complete-slash\n  ([state e]\n   (let [{:search/keys [index results]} @state\n         {:keys [value head tail target]} (destruct-key-down e)\n         [_ _ expansion _ pos] (nth results index)\n         expand    (if (fn? expansion) (expansion) expansion)\n         start-idx (dec (count (re-find #\"(?s).*/\" head)))\n         new-head  (subs value 0 start-idx)\n         new-str   (str new-head expand tail)]\n     (swap! state assoc\n            :search/type nil\n            :string/local new-str)\n     (set! (.-value target) new-str)\n     (when pos\n       (let [new-idx (- (count (str new-head expand)) pos)]\n         (set-cursor-position target new-idx)))))\n  ([state target item]\n   (let [{:keys [value head tail]} (destruct-target target)\n         [_ _ expansion _ pos] item\n         expand    (if (fn? expansion) (expansion) expansion)\n         start-idx (dec (count (re-find #\"(?s).*/\" head)))\n         new-head  (subs value 0 start-idx)\n         new-str   (str new-head expand tail)]\n     (swap! state assoc\n            :search/type nil\n            :string/local new-str)\n     (set! (.-value target) new-str)\n     (when pos\n       (let [new-idx (- (count (str new-head expand)) pos)]\n         (set-cursor-position target new-idx))))))\n\n\n(defn auto-complete-hashtag\n  ([state e]\n   (let [{:search/keys [index results]} @state\n         {:keys [node/title block/uid]} (nth results index nil)\n         {:keys [value head tail]} (destruct-key-down e)\n         expansion (or title uid)\n         start-idx (count (re-find #\"(?s).*#\" head))\n         new-head  (subs value 0 start-idx)\n         new-str   (str new-head \"[[\" expansion \"]]\" tail)]\n     (if (nil? expansion)\n       (swap! state assoc :search/type nil)\n       (swap! state assoc\n              :search/type nil\n              :string/local new-str))))\n  ([state target expansion]\n   (let [{:keys [value head tail]} (destruct-target target)\n         start-idx (count (re-find #\"(?s).*#\" head))\n         new-head  (subs value 0 start-idx)\n         new-str   (str new-head \"[[\" expansion \"]]\" tail)]\n     (if (nil? expansion)\n       (swap! state assoc :search/type nil)\n       (swap! state assoc\n              :search/type nil\n              :string/local new-str)))))\n\n\n(defn auto-complete-inline\n  ([state e]\n   (let [{:search/keys [query type index results]} @state\n         {:keys [node/title block/uid]} (nth results index nil)\n         {:keys [start head tail target]} (destruct-key-down e)\n         expansion    (or title uid)\n         block?       (= type :block)\n         page?        (= type :page)\n         ;; rewrite this more cleanly\n         head-pattern (cond block? (re-pattern (str \"(?s)(.*)\\\\(\\\\(\" query))\n                            page? (re-pattern (str \"(?s)(.*)\\\\[\\\\[\" query)))\n         tail-pattern (cond block? #\"(?s)(\\)\\))?(.*)\"\n                            page? #\"(?s)(\\]\\])?(.*)\")\n         new-head     (cond block? \"$1((\"\n                            page? \"$1[[\")\n         closing-str  (cond block? \"))\"\n                            page? \"]]\")\n         replacement  (str new-head expansion closing-str)\n         replace-str  (replace-first head head-pattern replacement)\n         matches      (re-matches tail-pattern tail)\n         [_ _ after-closing-str] matches\n         new-str      (str replace-str after-closing-str)]\n     (if (nil? expansion)\n       (swap! state assoc :search/type nil)\n       (swap! state assoc :search/type nil :string/local new-str))\n     (setStart target (+ 2 start))))\n  ([state target expansion]\n   (let [{:search/keys [query type]} @state\n         {:keys [start head tail]} (destruct-target target)\n         block?       (= type :block)\n         page?        (= type :page)\n         ;; rewrite this more cleanly\n         head-pattern (cond block? (re-pattern (str \"(?s)(.*)\\\\(\\\\(\" query))\n                            page? (re-pattern (str \"(?s)(.*)\\\\[\\\\[\" query)))\n         tail-pattern (cond block? #\"(?s)(\\)\\))?(.*)\"\n                            page? #\"(?s)(\\]\\])?(.*)\")\n         new-head     (cond block? \"$1((\"\n                            page? \"$1[[\")\n         closing-str  (cond block? \"))\"\n                            page? \"]]\")\n         replacement  (str new-head expansion closing-str)\n         replace-str  (replace-first head head-pattern replacement)\n         matches      (re-matches tail-pattern tail)\n         [_ _ after-closing-str] matches\n         new-str      (str replace-str after-closing-str)]\n     (if (nil? expansion)\n       (swap! state assoc :search/type nil)\n       (swap! state assoc :search/type nil :string/local new-str))\n     (setStart target (+ 2 start)))))\n\n\n;;; Arrow Keys\n\n\n(defn block-start?\n  [e]\n  (let [[start _] (get-end-points (.. e -target))]\n    (zero? start)))\n\n\n(defn block-end?\n  [e]\n  (let [{:keys [value end]} (destruct-key-down e)]\n    (= end (count value))))\n\n\n(defn dec-cycle\n  [min max idx]\n  (if (<= idx min)\n    max\n    (dec idx)))\n\n\n(defn inc-cycle\n  [min max idx]\n  (if (>= idx max)\n    min\n    (inc idx)))\n\n\n(defn cycle-list\n  \"If user has slash menu or inline search dropdown open:\n  - pressing down increments index\n  - pressing up decrements index\n  0 is typically min index\n  max index is collection length minus 1\"\n  [min max idx up? down?]\n  (let [f (cond up? dec-cycle\n                down? inc-cycle)]\n    (f min max idx)))\n\n\n(defn max-idx\n  [coll]\n  (-> coll count dec))\n\n\n(defn handle-arrow-key\n  [e uid state]\n  (let [{:keys [key-code shift ctrl target selection]} (destruct-key-down e)\n        selection?      (not (blank? selection))\n        start?          (block-start? e)\n        end?            (block-end? e)\n        {:search/keys [results type index] caret-position :caret-position} @state\n        textarea-height (.. target -offsetHeight)\n        {:keys [top height]} caret-position\n        rows            (js/Math.round (/ textarea-height height))\n        row             (js/Math.ceil (/ top height))\n        top-row?        (= row 1)\n        bottom-row?     (= row rows)\n        up?             (= key-code KeyCodes.UP)\n        down?           (= key-code KeyCodes.DOWN)\n        left?           (= key-code KeyCodes.LEFT)\n        right?          (= key-code KeyCodes.RIGHT)]\n\n    (cond\n      ;; Shift: select block if leaving block content boundaries (top or bottom rows). Otherwise select textarea text (default)\n      shift (cond\n              left? nil\n              right? nil\n              (or (and up? top-row?)\n                  (and down? bottom-row?)) (do\n                                             (.. target blur)\n                                             (dispatch [:selected/add-item uid])))\n\n      ;; Control: fold or unfold blocks\n      ctrl (cond\n             left? nil\n             right? nil\n             (or up? down?) (let [new-open-state (cond\n                                                   up? false\n                                                   down? true)\n                                  event [:transact [[:db/add [:block/uid uid] :block/open new-open-state]]]]\n                              (.. e preventDefault)\n                              (dispatch event)))\n\n      ;; Type, one of #{:slash :block :page}: If slash commands or inline search is open, cycle through options\n      type (cond\n             (or left? right?) (swap! state assoc :search/index 0 :search/type nil)\n             (or up? down?) (let [cur-index    index\n                                  min-index    0\n                                  max-index    (max-idx results)\n                                  next-index   (cycle-list min-index max-index cur-index up? down?)\n                                  container-el (getElement \"dropdown-menu\")\n                                  target-el    (getElement (str \"dropdown-item-\" next-index))]\n                              (.. e preventDefault)\n                              (swap! state assoc :search/index next-index)\n                              (scroll-if-needed target-el container-el)))\n\n      selection? nil\n\n      ;; Else: navigate across blocks\n      (or (and up? top-row?)\n          (and left? start?)) (do (.. e preventDefault)\n                                  (dispatch [:up uid]))\n      (or (and down? bottom-row?)\n          (and right? end?)) (do (.. e preventDefault)\n                                 (dispatch [:down uid])))))\n\n\n;;; Tab\n\n(defn handle-tab\n  \"Bug: indenting sets the cursor position to 0, likely because a new textarea element is created on the DOM. Set selection appropriately.\n  See :indent event for why value must be passed as well.\"\n  [e uid _state]\n  (.. e preventDefault)\n  (let [{:keys [shift] :as d-key-down} (destruct-key-down e)\n        selected-items @(subscribe [:selected/items])]\n    (when (empty? selected-items)\n      (if shift\n        (dispatch [:unindent uid d-key-down])\n        (dispatch [:indent uid d-key-down])))))\n\n\n(defn handle-escape\n  \"BUG: escape is fired 24 times for some reason.\"\n  [e state]\n  (.. e preventDefault)\n  (swap! state assoc :search/type nil)\n  (dispatch [:editing/uid nil]))\n\n;;; Enter\n\n(def throttle-dispatch (throttle #(dispatch %) 100))\n\n\n(defn handle-enter\n  [e uid state]\n  (let [{:keys [shift ctrl meta head tail value] :as d-key-down} (destruct-key-down e)\n        {:search/keys [type]} @state]\n    (.. e preventDefault)\n    (cond\n      type (case type\n             :slash (auto-complete-slash state e)\n             :page (auto-complete-inline state e)\n             :block (auto-complete-inline state e)\n             :hashtag (auto-complete-hashtag state e))\n      ;; shift-enter: add line break to textarea\n      shift (swap! state assoc :string/local (str head \"\\n\" tail))\n      ;; cmd-enter: cycle todo states. 13 is the length of the {{[[TODO]]}} string\n      (shortcut-key? meta ctrl) (let [first    (subs value 0 13)\n                                      new-tail (subs value 13)\n                                      new-str  (cond (= first \"{{[[TODO]]}} \") (str \"{{[[DONE]]}} \" new-tail)\n                                                     (= first \"{{[[DONE]]}} \") new-tail\n                                                     :else (str \"{{[[TODO]]}} \" value))]\n                                  (swap! state assoc :string/local new-str))\n      ;; default: may mutate blocks\n      :else (throttle-dispatch [:enter uid d-key-down]))))\n\n\n;;; Pair Chars: auto-balance for backspace and writing chars\n\n(def PAIR-CHARS\n  {\"(\" \")\"\n   \"[\" \"]\"\n   \"{\" \"}\"\n   \"\\\"\" \"\\\"\"})\n  ;;\"`\" \"`\"\n  ;;\"*\" \"*\"\n   ;;\"_\" \"_\"})\n\n\n(defn surround\n  \"https://github.com/tpope/vim-surround\"\n  [selection around]\n  (if-let [complement (get PAIR-CHARS around)]\n    (str around selection complement)\n    (str around selection around)))\n\n\n;; TODO: put text caret in correct position\n(defn handle-shortcuts\n  [e uid state]\n  (let [{:keys [key-code head tail selection start end target value]} (destruct-key-down e)\n        selection? (not= start end)]\n\n    (cond\n      (and (= key-code KeyCodes.A) (= selection value)) (let [closest-node-page  (.. target (closest \".node-page\"))\n                                                              closest-block-page (.. target (closest \".block-page\"))\n                                                              closest            (or closest-node-page closest-block-page)\n                                                              block              (db/get-block [:block/uid (.. closest -dataset -uid)])\n                                                              children           (->> (:block/children block)\n                                                                                      (sort-by :block/order)\n                                                                                      (mapv :block/uid))]\n                                                          (dispatch [:selected/add-items children]))\n      ;; When undo no longer makes changes for local textarea, do datascript undo.\n      (= key-code KeyCodes.Z) (let [{:string/keys [local previous]} @state]\n                                (when (= local previous)\n                                  (dispatch [:undo])))\n      (= key-code KeyCodes.B) (let [new-str (str head (surround selection \"**\") tail)]\n                                (swap! state assoc :string/local new-str)\n                                (set! (.-value target) new-str)\n                                (if selection?\n                                  (do (setStart target (+ 2 start))\n                                      (setEnd target (+ 2 end)))\n                                  (set-cursor-position target (+ 2 start))))\n\n      ;; Disabling keybinding for now https://github.com/athensresearch/athens/issues/556\n      ;; TODO fix to make keybinding (\"Ctrl-i\") change font-style to italic\n\n      #_ (and (not shift) (= key-code KeyCodes.I))\n      #_(let [new-str (str head (surround selection \"__\") tail)]\n        (swap! state assoc :string/local new-str)\n        (set! (.-value target) new-str)\n        (if selection?\n          (do (setStart target (+ 2 start))\n              (setEnd target (+ 2 end)))\n          (set-cursor-position target (+ 2 start))))\n\n      ;; if caret within [[brackets]] or #[[brackets]], navigate to that page\n      ;; if caret on a #hashtag, navigate to that page\n      ;; if caret within ((uid)), navigate to that uid\n      ;; otherwise zoom into current block\n\n      (= key-code KeyCodes.O) (let [link      (str (replace-first head #\"(?s)(.*)\\[\\[\" \"\")\n                                                   (replace-first tail #\"(?s)\\]\\](.*)\" \"\"))\n                                    hashtag   (str (replace-first head #\"(?s).*#\" \"\")\n                                                   (replace-first tail #\"(?s)\\s(.*)\" \"\"))\n                                    block-ref (str (replace-first head #\"(?s)(.*)\\(\\(\" \"\")\n                                                   (replace-first tail #\"(?s)\\)\\)(.*)\" \"\"))]\n\n                                ;; save block before navigating away\n                                (db/transact-state-for-uid uid state)\n\n                                (cond\n                                  (and (re-find #\"(?s)\\[\\[\" head)\n                                       (re-find #\"(?s)\\]\\]\" tail)\n                                       (nil? (re-find #\"(?s)\\[\" link))\n                                       (nil? (re-find #\"(?s)\\]\" link)))\n                                  (let [eid (db/e-by-av :node/title link)\n                                        uid (db/v-by-ea eid :block/uid)]\n                                    (if eid\n                                      (router/navigate-uid uid e)\n                                      (let [new-uid (athens.util/gen-block-uid)]\n                                        (.blur target)\n                                        (dispatch [:page/create link new-uid])\n                                        (js/setTimeout #(router/navigate-uid new-uid e) 50))))\n\n                                  ;; same logic as link\n                                  (and (re-find #\"(?s)#\" head)\n                                       (re-find #\"(?s)\\s\" tail))\n                                  (let [eid (db/e-by-av :node/title hashtag)\n                                        uid (db/v-by-ea eid :block/uid)]\n                                    (if eid\n                                      (router/navigate-uid uid e)\n                                      (let [new-uid (athens.util/gen-block-uid)]\n                                        (.blur target)\n                                        (dispatch [:page/create link new-uid])\n                                        (js/setTimeout #(router/navigate-uid new-uid e) 50))))\n\n                                  (and (re-find #\"(?s)\\(\\(\" head)\n                                       (re-find #\"(?s)\\)\\)\" tail)\n                                       (nil? (re-find #\"(?s)\\(\" block-ref))\n                                       (nil? (re-find #\"(?s)\\)\" block-ref))\n                                       (db/e-by-av :block/uid block-ref))\n                                  (router/navigate-uid block-ref e)\n\n                                  :else (router/navigate-uid uid e))))))\n\n\n(defn pair-char?\n  [e]\n  (let [{:keys [key]} (destruct-key-down e)\n        pair-char-set (-> PAIR-CHARS\n                          seq\n                          flatten\n                          set)]\n    (pair-char-set key)))\n\n\n(defn handle-pair-char\n  [e _ state]\n  (let [{:keys [key head tail target start end selection value]} (destruct-key-down e)\n        close-pair (get PAIR-CHARS key)\n        lookbehind-char (nth value start nil)]\n    (.. e preventDefault)\n\n    (cond\n      ;; when close char, increment caret index without writing more\n      (or (= \")\" key lookbehind-char)\n          (= \"}\" key lookbehind-char)\n          (= \"\\\"\" key lookbehind-char)\n          (= \"]\" key lookbehind-char)) (do (setStart target (inc start))\n                                           (swap! state assoc :search/type nil))\n\n      (= selection \"\") (let [new-str (str head key close-pair tail)\n                             new-idx (inc start)]\n                         (swap! state assoc :string/local new-str)\n                         (set! (.-value target) new-str)\n                         (set-cursor-position target new-idx)\n                         (when (>= (count (:string/local @state)) 4)\n                           (let [four-char        (subs (:string/local @state) (dec start) (+ start 3))\n                                 double-brackets? (= \"[[]]\" four-char)\n                                 double-parens?   (= \"(())\" four-char)\n                                 type             (cond double-brackets? :page\n                                                        double-parens? :block)]\n                             (when type\n                               (swap! state assoc :search/type type :search/query \"\" :search/results [])))))\n\n      (not= selection \"\") (let [surround-selection (surround selection key)\n                                new-str            (str head surround-selection tail)]\n                            (swap! state assoc :string/local new-str)\n                            (set! (.-value target) new-str)\n                            (set! (.-selectionStart target) (inc start))\n                            (set! (.-selectionEnd target) (inc end))\n                            (let [four-char        (str (subs (:string/local @state) (dec start) (inc start))\n                                                        (subs (:string/local @state) (+ end 1) (+ end 3)))\n                                  double-brackets? (= \"[[]]\" four-char)\n                                  double-parens?   (= \"(())\" four-char)\n                                  type             (cond double-brackets? :page\n                                                         double-parens? :block)\n                                  query-fn         (cond double-brackets? db/search-in-node-title\n                                                         double-parens? db/search-in-block-content)]\n                              (when type\n                                (swap! state assoc :search/type type :search/query selection :search/results (query-fn selection))))))))\n\n\n;; Backspace\n\n(defn handle-backspace\n  [e uid state]\n  (let [{:keys [start value target end]} (destruct-key-down e)\n        no-selection? (= start end)\n        sub-str (subs value (dec start) (inc start))\n        possible-pair (#{\"[]\" \"{}\" \"()\"} sub-str)\n        head    (subs value 0 (dec start))\n        {:search/keys [type]} @state\n        look-behind-char (nth value (dec start) nil)]\n\n    (cond\n      (and (block-start? e) no-selection?) (dispatch [:backspace uid value])\n      ;; pair char: hide inline search and auto-balance\n      possible-pair (let [head    (subs value 0 (dec start))\n                          tail    (subs value (inc start))\n                          new-str (str head tail)\n                          new-idx (dec start)]\n                      (.. e preventDefault)\n                      (swap! state assoc\n                             :search/type nil\n                             :string/local new-str)\n                      (set! (.-value target) new-str)\n                      (set-cursor-position target new-idx))\n\n      ;; slash: close dropdown\n      (and (= \"/\" look-behind-char) (= type :slash)) (swap! state assoc :search/type nil)\n      ;; hashtag: close dropdown\n      (and (= \"#\" look-behind-char) (= type :hashtag)) (swap! state assoc :search/type nil)\n      ;; dropdown is open: update query\n      type (update-query state head \"\" type))))\n\n\n;; Character: for queries\n\n(defn is-character-key?\n  \"Closure returns true even when using modifier keys. We do not make that assumption.\"\n  [e]\n  (let [{:keys [meta ctrl alt key-code]} (destruct-key-down e)]\n    (and (not meta) (not ctrl) (not alt)\n         (isCharacterKey key-code))))\n\n\n(defn write-char\n  \"When user types /, trigger slash menu.\n  If user writes a character while there is a slash/type, update query and results.\"\n  [e _ state]\n  (let [{:keys [head key]} (destruct-key-down e)\n        {:search/keys [type]} @state]\n    (cond\n      (and (= key \" \") (= type :hashtag)) (swap! state assoc\n                                                 :search/type nil\n                                                 :search/results [])\n      (and (= key \"/\") (nil? type)) (swap! state assoc\n                                           :search/index 0\n                                           :search/query \"\"\n                                           :search/type :slash\n                                           :search/results slash-options)\n      (and (= key \"#\") (nil? type)) (swap! state assoc\n                                           :search/index 0\n                                           :search/query \"\"\n                                           :search/type :hashtag\n                                           :search/results [])\n      type (update-query state head key type))))\n\n\n(defn handle-delete\n  \"Delete has the same behavior as pressing backspace on the next block.\"\n  [e uid _state]\n  (let [{:keys [start end value]} (destruct-key-down e)\n        no-selection?  (= start end)\n        end?           (= end (count value))\n        next-block-uid (db/next-block-uid uid)]\n    (when (and no-selection? end? next-block-uid)\n      (let [next-block (db/get-block [:block/uid next-block-uid])]\n        (dispatch [:backspace next-block-uid (:block/string next-block)])))))\n\n\n(defn textarea-key-down\n  [e uid state]\n  (let [d-event (destruct-key-down e)\n        {:keys [meta ctrl key-code]} d-event]\n\n    ;; used for paste, to determine if shift key was held down\n    (swap! state assoc :last-keydown d-event)\n\n    ;; update caret position for search dropdowns and for up/down\n    (when (nil? (:search/type @state))\n      (let [caret-position (get-caret-position (.. e -target))]\n        (swap! state assoc :caret-position caret-position)))\n\n    ;; dispatch center\n    (cond\n      (arrow-key-direction e)         (handle-arrow-key e uid state)\n      (pair-char? e)                  (handle-pair-char e uid state)\n      (= key-code KeyCodes.TAB)       (handle-tab e uid state)\n      (= key-code KeyCodes.ENTER)     (handle-enter e uid state)\n      (= key-code KeyCodes.BACKSPACE) (handle-backspace e uid state)\n      (= key-code KeyCodes.DELETE)    (handle-delete e uid state)\n      (= key-code KeyCodes.ESC)       (handle-escape e state)\n      (shortcut-key? meta ctrl)       (handle-shortcuts e uid state)\n      (is-character-key? e)           (write-char e uid state))))\n"]}