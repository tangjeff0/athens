{
"version":3,
"file":"module$node_modules$aframe_extras$src$pathfinding$system.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAe,wDAAf,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAC7G,IAAAC,YAAgBH,OAAA,CAAQ,8DAAR,CAAhBG,CAAA,WAAA,CAEFC,WAAa,IAAID,WAQvBF,OAAA,CAAOC,OAAP,CAAiBG,MAAA,CAAOC,cAAP,CAAsB,KAAtB,CAA6B,CAC5CC,KAAMA,QAAS,EAAG,CAChB,IAAA,CAAKC,OAAL,CAAe,IACf,KAAA,CAAKC,MAAL,CAAc,IAAIC,GAFF,CAD0B,CAS5CC,mBAAoBA,QAAS,CAACC,QAAD,CAAW,CACtC,IAAA,CAAKJ,OAAL,CAAe,IAAIK,KAAJ,CAAUC,IAAV,CAAeF,QAAf,CACfR,WAAA,CAAWW,WAAX,CAlBSC,OAkBT,CAA6Bb,WAAA,CAAYc,UAAZ,CAAuBL,QAAvB,CAA7B,CACAM,MAAA,CAAMC,IAAN,CAAW,IAAX,CAAgBV,MAAhB,CAAA,CAAwBW,OAAxB,CAAgC,QAAA,CAACC,KAAD,CAAW,CAAA,MAAAA,MAAA,CAAMC,iBAAN,EAAA,CAA3C,CAHsC,CATI;AAkB5CC,WAAYA,QAAS,EAAG,CACtB,MAAO,KAAP,CAAYf,OADU,CAlBoB,CAyB5CgB,SAAUA,QAAS,CAACC,IAAD,CAAO,CACxB,IAAA,CAAKhB,MAAL,CAAYiB,GAAZ,CAAgBD,IAAhB,CADwB,CAzBkB,CAgC5CE,YAAaA,QAAS,CAACF,IAAD,CAAO,CAC3B,IAAA,CAAKhB,MAAL,CAAYmB,MAAZ,CAAmBH,IAAnB,CAD2B,CAhCe,CA0C5CI,QAASA,QAAS,CAACC,KAAD,CAAQC,GAAR,CAAaC,OAAb,CAAsB,CACtC,MAAO,KAAA,CAAKxB,OAAL,CACHJ,UAAA,CAAW6B,QAAX,CAAoBH,KAApB,CAA2BC,GAA3B,CAnDKf,OAmDL,CAAsCgB,OAAtC,CADG,CAEH,IAHkC,CA1CI,CAoD5CE,SAAUA,QAAS,CAACC,QAAD,CAAW,CAC5B,MAAO,KAAA,CAAK3B,OAAL,CACHJ,UAAA,CAAW8B,QAAX,CA7DKlB,OA6DL,CAA0BmB,QAA1B,CADG,CAEH,IAHwB,CApDc,CA+D5CC,QAASA,QAAS,CAACD,QAAD,CAAWH,OAAX,CAAoB,CACpC,MAAO,KAAA,CAAKxB,OAAL,CACHJ,UAAA,CAAWiC,cAAX,CAA0BF,QAA1B,CAxEKnB,OAwEL,CAA0CgB,OAA1C,CAAmD,CAAA,CAAnD,CADG,CAEH,IAHgC,CA/DM,CA6E5CM,UAAWA,QAAS,CAACR,KAAD,CAAQC,GAAR,CAAaC,OAAb,CAAsBO,IAAtB;AAA4BC,SAA5B,CAAuC,CACzD,MAAK,KAAL,CAAUhC,OAAV,CAGY+B,IAAL,CAIAnC,UAAA,CAAWkC,SAAX,CAAqBR,KAArB,CAA4BC,GAA5B,CAAiCQ,IAAjC,CA5FEvB,OA4FF,CAA6CgB,OAA7C,CAAsDQ,SAAtD,CAJA,EACLA,SAAA,CAAUC,IAAV,CAAeV,GAAf,CACO,CAAA,IAAA,CAAKK,OAAL,CAAaL,GAAb,CAAkBC,OAAlB,CAFF,CAHP,EACEQ,SAAA,CAAUC,IAAV,CAAeV,GAAf,CACO,CAAA,IAFT,CADyD,CA7Ef,CAA7B,CAXoG;",
"sources":["node_modules/aframe-extras/src/pathfinding/system.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$aframe_extras$src$pathfinding$system\"] = function(global,require,module,exports) {\nconst { Pathfinding } = require('three-pathfinding');\n\nconst pathfinder = new Pathfinding();\nconst ZONE = 'level';\n\n/**\n * nav\n *\n * Pathfinding system, using PatrolJS.\n */\nmodule.exports = AFRAME.registerSystem('nav', {\n  init: function () {\n    this.navMesh = null;\n    this.agents = new Set();\n  },\n\n  /**\n   * @param {THREE.Geometry} geometry\n   */\n  setNavMeshGeometry: function (geometry) {\n    this.navMesh = new THREE.Mesh(geometry);\n    pathfinder.setZoneData(ZONE, Pathfinding.createZone(geometry));\n    Array.from(this.agents).forEach((agent) => agent.updateNavLocation());\n  },\n\n  /**\n   * @return {THREE.Mesh}\n   */\n  getNavMesh: function () {\n    return this.navMesh;\n  },\n\n  /**\n   * @param {NavAgent} ctrl\n   */\n  addAgent: function (ctrl) {\n    this.agents.add(ctrl);\n  },\n\n  /**\n   * @param {NavAgent} ctrl\n   */\n  removeAgent: function (ctrl) {\n    this.agents.delete(ctrl);\n  },\n\n  /**\n   * @param  {THREE.Vector3} start\n   * @param  {THREE.Vector3} end\n   * @param  {number} groupID\n   * @return {Array<THREE.Vector3>}\n   */\n  getPath: function (start, end, groupID) {\n    return this.navMesh\n      ? pathfinder.findPath(start, end, ZONE, groupID)\n      : null;\n  },\n\n  /**\n   * @param {THREE.Vector3} position\n   * @return {number}\n   */\n  getGroup: function (position) {\n    return this.navMesh\n      ? pathfinder.getGroup(ZONE, position)\n      : null;\n  },\n\n  /**\n   * @param  {THREE.Vector3} position\n   * @param  {number} groupID\n   * @return {Node}\n   */\n  getNode: function (position, groupID) {\n    return this.navMesh\n      ? pathfinder.getClosestNode(position, ZONE, groupID, true)\n      : null;\n  },\n\n  /**\n   * @param  {THREE.Vector3} start Starting position.\n   * @param  {THREE.Vector3} end Desired ending position.\n   * @param  {number} groupID\n   * @param  {Node} node\n   * @param  {THREE.Vector3} endTarget (Output) Adjusted step end position.\n   * @return {Node} Current node, after step is taken.\n   */\n  clampStep: function (start, end, groupID, node, endTarget) {\n    if (!this.navMesh) {\n      endTarget.copy(end);\n      return null;\n    } else if (!node) {\n      endTarget.copy(end);\n      return this.getNode(end, groupID);\n    }\n    return pathfinder.clampStep(start, end, node, ZONE, groupID, endTarget);\n  }\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","Pathfinding","pathfinder","AFRAME","registerSystem","init","navMesh","agents","Set","setNavMeshGeometry","geometry","THREE","Mesh","setZoneData","ZONE","createZone","Array","from","forEach","agent","updateNavLocation","getNavMesh","addAgent","ctrl","add","removeAgent","delete","getPath","start","end","groupID","findPath","getGroup","position","getNode","getClosestNode","clampStep","node","endTarget","copy"]
}
