{
"version":3,
"file":"module$node_modules$aframe_extras$src$pathfinding$nav_mesh.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAe,0DAAf,CAA+E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAOvHD,MAAA,CAAOC,OAAP,CAAiBC,MAAA,CAAOC,iBAAP,CAAyB,UAAzB,CAAqC,CACpDC,KAAMA,QAAS,EAAG,CAChB,IAAA,CAAKC,MAAL,CAAc,IAAd,CAAmBC,EAAnB,CAAsBC,OAAtB,CAA8BC,OAA9B,CAAsCC,GACtC,KAAA,CAAKC,gBAAL,CAAwB,CAAA,CACxB,KAAA,CAAKJ,EAAL,CAAQK,gBAAR,CAAyB,aAAzB,CAAwC,IAAA,CAAKC,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAxC,CAHgB,CADkC,CAOpDC,KAAMA,QAAS,EAAG,CACX,IAAL,CAAUJ,gBAAV,EAA4B,IAAA,CAAKE,WAAL,EADZ,CAPkC,CAWpDA,YAAaA,QAAS,EAAG,CACvB,IAAMG,OAAS,IAAA,CAAKT,EAAL,CAAQU,WAAR,CAAoB,MAApB,CAAf,CACMC,MAAQ,IAARA,CAAaX,EAAbW,CAAgBV,OAAhBU,CAAwBC,QAE9B,IAAKH,MAAL,CAAA,CAEA,IAAII,OACJJ,OAAA,CAAOK,QAAP,CAAgB,QAAA,CAACC,IAAD,CAAU,CACpBA,IAAJ,CAASC,MAAT;CAAiBH,OAAjB,CAA2BE,IAA3B,CADwB,CAA1B,CAIKF,QAAL,GAEMI,MAQN,CARwBJ,OAAA,CAAQK,QAAR,CAAiBC,gBAAjB,CACpB,CAAA,IAAIC,KAAJ,CAAUC,QAAV,EAAqBC,kBAArB,CAAwCT,OAAxC,CAAgDK,QAAhD,CADoB,CAEpBL,OAAA,CAAQK,QAAR,CAAiBK,KAAjB,EAMJ,CAJAZ,KAAA,CAAMa,iBAAN,EAIA,CAHAP,MAAA,CAAgBQ,WAAhB,CAA4BZ,OAA5B,CAAoCa,WAApC,CAGA,CAFA,IAAA,CAAK3B,MAAL,CAAY4B,kBAAZ,CAA+BV,MAA/B,CAEA,CAAA,IAAA,CAAKb,gBAAL,CAAwB,CAAA,CAVxB,CAPA,CAJuB,CAX2B,CAArC,CAPsG;",
"sources":["node_modules/aframe-extras/src/pathfinding/nav-mesh.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$aframe_extras$src$pathfinding$nav_mesh\"] = function(global,require,module,exports) {\n/**\n * nav-mesh\n *\n * Waits for a mesh to be loaded on the current entity, then sets it as the\n * nav mesh in the pathfinding system.\n */\nmodule.exports = AFRAME.registerComponent('nav-mesh', {\n  init: function () {\n    this.system = this.el.sceneEl.systems.nav;\n    this.hasLoadedNavMesh = false;\n    this.el.addEventListener('object3dset', this.loadNavMesh.bind(this));\n  },\n\n  play: function () {\n    if (!this.hasLoadedNavMesh) this.loadNavMesh();\n  },\n\n  loadNavMesh: function () {\n    const object = this.el.getObject3D('mesh');\n    const scene = this.el.sceneEl.object3D;\n\n    if (!object) return;\n\n    let navMesh;\n    object.traverse((node) => {\n      if (node.isMesh) navMesh = node;\n    });\n\n    if (!navMesh) return;\n\n    const navMeshGeometry = navMesh.geometry.isBufferGeometry\n      ? new THREE.Geometry().fromBufferGeometry(navMesh.geometry)\n      : navMesh.geometry.clone();\n\n    scene.updateMatrixWorld();\n    navMeshGeometry.applyMatrix(navMesh.matrixWorld);\n    this.system.setNavMeshGeometry(navMeshGeometry);\n\n    this.hasLoadedNavMesh = true;\n  }\n});\n\n};"],
"names":["shadow$provide","global","require","module","exports","AFRAME","registerComponent","init","system","el","sceneEl","systems","nav","hasLoadedNavMesh","addEventListener","loadNavMesh","bind","play","object","getObject3D","scene","object3D","navMesh","traverse","node","isMesh","navMeshGeometry","geometry","isBufferGeometry","THREE","Geometry","fromBufferGeometry","clone","updateMatrixWorld","applyMatrix","matrixWorld","setNavMeshGeometry"]
}
