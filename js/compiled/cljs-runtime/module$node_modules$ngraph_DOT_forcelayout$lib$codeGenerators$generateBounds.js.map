{
"version":3,
"file":"module$node_modules$ngraph_DOT_forcelayout$lib$codeGenerators$generateBounds.js",
"lineCount":5,
"mappings":"AAAAA,cAAA,CAAe,4EAAf,CAAiG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYzIC,QAASA,2BAA0B,CAACC,SAAD,CAAY,CACzCC,SAAAA,CAAUC,oBAAA,CAAqBF,SAArB,CAyDd,OAvDW,kCAuDX,CArDIC,SAAA,CAAQ,6BAAR,CAAuC,CAACE,OAAQ,CAAT,CAAvC,CAqDJ,CAvDW,6KAuDX,CA1CUF,SAAA,CAAQ,mBAAR;AAA0B,CAACG,KAAM,IAAP,CAA1B,CA0CV,CAvDW,8JAuDX,CArCUH,SAAA,CAAQ,qCAAR,CAA4C,CAACE,OAAQ,EAAT,CAA5C,CAqCV,CAvDW,yBAuDX,CAlCQF,SAAA,CAAQ,oCAAR,CAA2C,CAACE,OAAQ,CAAT,CAA3C,CAkCR,CAvDW,4BAuDX,CAhCQF,SAAA,CAAQ,sEAAR,CAA6E,CAACE,OAAQ,CAAT,CAA7E,CAgCR,CAvDW,2FAuDX;AA3BQF,SAAA,CAAQ,iEAAR,CAA2E,CAACE,OAAQ,CAAT,CAA3E,CA2BR,CAvDW,kKAuDX,CAlBIF,SAAA,CAAQ,sCAAR,CAA6C,CAACE,OAAQ,CAAT,CAA7C,CAkBJ,CAvDW,QAuDX,CAjBIF,SAAA,CAAQ,sCAAR,CAA6C,CAACE,OAAQ,CAAT,CAA7C,CAiBJ,CAvDW,qKAuDX;AAZMF,SAAA,CAAQ,iEAAR,CAAqE,CAACE,OAAQ,CAAT,CAArE,CAYN,CAvDW,UAuDX,CAXMF,SAAA,CAAQ,iEAAR,CAAqE,CAACE,OAAQ,CAAT,CAArE,CAWN,CAvDW,iBAuDX,CARIF,SAAA,CAAQ,uCAAR,CAA8C,CAACE,OAAQ,CAAT,CAA9C,CAQJ,CAvDW,QAuDX,CAPIF,SAAA,CAAQ,uCAAR,CAA8C,CAACE,OAAQ,CAAT,CAA9C,CAOJ,CAvDW,gDAuDX,CAHIF,SAAA,CAAQ,0DAAR,CAA8D,CAACE,OAAQ,CAAT,CAA9D,CAGJ,CAvDW,SAHkC,CAV/CN,MAAA,CAAOC,OAAP,CAKAO,QAA+B,CAACL,SAAD,CAAY,CACrCM,SAAAA;AAAOP,0BAAA,CAA2BC,SAA3B,CACX,OAAO,KAAIO,QAAJ,CAAa,QAAb,CAAuB,UAAvB,CAAmC,QAAnC,CAA6CD,SAA7C,CAFkC,CAJ3CT,OAAA,CAAOC,OAAP,CAAeU,oBAAf,CAAsCT,0BAEtC,KAAMG,qBAAuBN,OAAA,CAAQ,oFAAR,CAL4G;",
"sources":["node_modules/ngraph_DOT_forcelayout/lib/codeGenerators/generateBounds.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ngraph_DOT_forcelayout$lib$codeGenerators$generateBounds\"] = function(global,require,module,exports) {\n\nmodule.exports = generateBoundsFunction;\nmodule.exports.generateFunctionBody = generateBoundsFunctionBody;\n\nconst createPatternBuilder = require('./createPatternBuilder');\n\nfunction generateBoundsFunction(dimension) {\n  let code = generateBoundsFunctionBody(dimension);\n  return new Function('bodies', 'settings', 'random', code);\n}\n\nfunction generateBoundsFunctionBody(dimension) {\n  let pattern = createPatternBuilder(dimension);\n\n  let code = `\n  var boundingBox = {\n    ${pattern('min_{var}: 0, max_{var}: 0,', {indent: 4})}\n  };\n\n  return {\n    box: boundingBox,\n\n    update: updateBoundingBox,\n\n    reset: resetBoundingBox,\n\n    getBestNewPosition: function (neighbors) {\n      var ${pattern('base_{var} = 0', {join: ', '})};\n\n      if (neighbors.length) {\n        for (var i = 0; i < neighbors.length; ++i) {\n          let neighborPos = neighbors[i].pos;\n          ${pattern('base_{var} += neighborPos.{var};', {indent: 10})}\n        }\n\n        ${pattern('base_{var} /= neighbors.length;', {indent: 8})}\n      } else {\n        ${pattern('base_{var} = (boundingBox.min_{var} + boundingBox.max_{var}) / 2;', {indent: 8})}\n      }\n\n      var springLength = settings.springLength;\n      return {\n        ${pattern('{var}: base_{var} + (random.nextDouble() - 0.5) * springLength,', {indent: 8})}\n      };\n    }\n  };\n\n  function updateBoundingBox() {\n    var i = bodies.length;\n    if (i === 0) return; // No bodies - no borders.\n\n    ${pattern('var max_{var} = Number.MIN_VALUE;', {indent: 4})}\n    ${pattern('var min_{var} = Number.MAX_VALUE;', {indent: 4})}\n\n    while(i--) {\n      // this is O(n), it could be done faster with quadtree, if we check the root node bounds\n      var bodyPos = bodies[i].pos;\n      ${pattern('if (bodyPos.{var} < min_{var}) min_{var} = bodyPos.{var};', {indent: 6})}\n      ${pattern('if (bodyPos.{var} > max_{var}) max_{var} = bodyPos.{var};', {indent: 6})}\n    }\n\n    ${pattern('boundingBox.min_{var} = min_{var};', {indent: 4})}\n    ${pattern('boundingBox.max_{var} = max_{var};', {indent: 4})}\n  }\n\n  function resetBoundingBox() {\n    ${pattern('boundingBox.min_{var} = boundingBox.max_{var} = 0;', {indent: 4})}\n  }\n`\n  return code;\n}\n};"],
"names":["shadow$provide","global","require","module","exports","generateBoundsFunctionBody","dimension","pattern","createPatternBuilder","indent","join","generateBoundsFunction","code","Function","generateFunctionBody"]
}
