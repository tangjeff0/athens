{
"version":3,
"file":"module$node_modules$ngraph_DOT_forcelayout$lib$createPhysicsSimulator.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/ngraph_DOT_forcelayout/lib/createPhysicsSimulator.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ngraph_DOT_forcelayout$lib$createPhysicsSimulator\"] = function(global,require,module,exports) {\n/**\n * Manages a simulation of physical forces acting on bodies and springs.\n */\nmodule.exports = createPhysicsSimulator;\n\nvar generateCreateBodyFunction = require('./codeGenerators/generateCreateBody');\nvar generateQuadTreeFunction = require('./codeGenerators/generateQuadTree');\nvar generateBoundsFunction = require('./codeGenerators/generateBounds');\nvar generateCreateDragForceFunction = require('./codeGenerators/generateCreateDragForce');\nvar generateCreateSpringForceFunction = require('./codeGenerators/generateCreateSpringForce');\nvar generateIntegratorFunction = require('./codeGenerators/generateIntegrator')\n\nvar dimensionalCache = {}\n\nfunction createPhysicsSimulator(settings) {\n  var Spring = require('./spring');\n  var merge = require('ngraph.merge');\n  var eventify = require('ngraph.events');\n  if (settings) {\n    // Check for names from older versions of the layout\n    if (settings.springCoeff !== undefined) throw new Error('springCoeff was renamed to springCoefficient');\n    if (settings.dragCoeff !== undefined) throw new Error('dragCoeff was renamed to dragCoefficient');\n  }\n\n  settings = merge(settings, {\n      /**\n       * Ideal length for links (springs in physical model).\n       */\n      springLength: 10,\n\n      /**\n       * Hook's law coefficient. 1 - solid spring.\n       */\n      springCoefficient: 0.8, \n\n      /**\n       * Coulomb's law coefficient. It's used to repel nodes thus should be negative\n       * if you make it positive nodes start attract each other :).\n       */\n      gravity: -12,\n\n      /**\n       * Theta coefficient from Barnes Hut simulation. Ranged between (0, 1).\n       * The closer it's to 1 the more nodes algorithm will have to go through.\n       * Setting it to one makes Barnes Hut simulation no different from\n       * brute-force forces calculation (each node is considered).\n       */\n      theta: 0.8,\n\n      /**\n       * Drag force coefficient. Used to slow down system, thus should be less than 1.\n       * The closer it is to 0 the less tight system will be.\n       */\n      dragCoefficient: 0.9, // TODO: Need to rename this to something better. E.g. `dragCoefficient`\n\n      /**\n       * Default time step (dt) for forces integration\n       */\n      timeStep : 0.5,\n\n      /**\n       * Adaptive time step uses average spring length to compute actual time step:\n       * See: https://twitter.com/anvaka/status/1293067160755957760\n       */\n      adaptiveTimeStepWeight: 0,\n\n      /**\n       * This parameter defines number of dimensions of the space where simulation\n       * is performed. \n       */\n      dimensions: 2,\n\n      /**\n       * In debug mode more checks are performed, this will help you catch errors\n       * quickly, however for production build it is recommended to turn off this flag\n       * to speed up computation.\n       */\n      debug: false\n  });\n\n  var factory = dimensionalCache[settings.dimensions];\n  if (!factory) {\n    var dimensions = settings.dimensions;\n    factory = {\n      Body: generateCreateBodyFunction(dimensions, settings.debug),\n      createQuadTree: generateQuadTreeFunction(dimensions),\n      createBounds: generateBoundsFunction(dimensions),\n      createDragForce: generateCreateDragForceFunction(dimensions),\n      createSpringForce: generateCreateSpringForceFunction(dimensions),\n      integrate: generateIntegratorFunction(dimensions),\n    };\n    dimensionalCache[dimensions] = factory;\n  }\n\n  var Body = factory.Body;\n  var createQuadTree = factory.createQuadTree;\n  var createBounds = factory.createBounds;\n  var createDragForce = factory.createDragForce;\n  var createSpringForce = factory.createSpringForce;\n  var integrate = factory.integrate;\n  var createBody = pos => new Body(pos);\n\n  var random = require('ngraph.random').random(42);\n  var bodies = []; // Bodies in this simulation.\n  var springs = []; // Springs in this simulation.\n\n  var quadTree =  createQuadTree(settings, random);\n  var bounds = createBounds(bodies, settings, random);\n  var springForce = createSpringForce(settings, random);\n  var dragForce = createDragForce(settings);\n\n  var totalMovement = 0; // how much movement we made on last step\n  var forces = [];\n  var forceMap = new Map();\n  var iterationNumber = 0;\n \n  addForce('nbody', nbodyForce);\n  addForce('spring', updateSpringForce);\n\n  var publicApi = {\n    /**\n     * Array of bodies, registered with current simulator\n     *\n     * Note: To add new body, use addBody() method. This property is only\n     * exposed for testing/performance purposes.\n     */\n    bodies: bodies,\n\n    quadTree: quadTree,\n\n    /**\n     * Array of springs, registered with current simulator\n     *\n     * Note: To add new spring, use addSpring() method. This property is only\n     * exposed for testing/performance purposes.\n     */\n    springs: springs,\n\n    /**\n     * Returns settings with which current simulator was initialized\n     */\n    settings: settings,\n\n    /**\n     * Adds a new force to simulation\n     */\n    addForce: addForce,\n    \n    /**\n     * Removes a force from the simulation.\n     */\n    removeForce: removeForce,\n\n    /**\n     * Returns a map of all registered forces.\n     */\n    getForces: getForces,\n\n    /**\n     * Performs one step of force simulation.\n     *\n     * @returns {boolean} true if system is considered stable; False otherwise.\n     */\n    step: function () {\n      for (var i = 0; i < forces.length; ++i) {\n        forces[i](iterationNumber);\n      }\n      var movement = integrate(bodies, settings.timeStep, settings.adaptiveTimeStepWeight);\n      iterationNumber += 1;\n      return movement;\n    },\n\n    /**\n     * Adds body to the system\n     *\n     * @param {ngraph.physics.primitives.Body} body physical body\n     *\n     * @returns {ngraph.physics.primitives.Body} added body\n     */\n    addBody: function (body) {\n      if (!body) {\n        throw new Error('Body is required');\n      }\n      bodies.push(body);\n\n      return body;\n    },\n\n    /**\n     * Adds body to the system at given position\n     *\n     * @param {Object} pos position of a body\n     *\n     * @returns {ngraph.physics.primitives.Body} added body\n     */\n    addBodyAt: function (pos) {\n      if (!pos) {\n        throw new Error('Body position is required');\n      }\n      var body = createBody(pos);\n      bodies.push(body);\n\n      return body;\n    },\n\n    /**\n     * Removes body from the system\n     *\n     * @param {ngraph.physics.primitives.Body} body to remove\n     *\n     * @returns {Boolean} true if body found and removed. falsy otherwise;\n     */\n    removeBody: function (body) {\n      if (!body) { return; }\n\n      var idx = bodies.indexOf(body);\n      if (idx < 0) { return; }\n\n      bodies.splice(idx, 1);\n      if (bodies.length === 0) {\n        bounds.reset();\n      }\n      return true;\n    },\n\n    /**\n     * Adds a spring to this simulation.\n     *\n     * @returns {Object} - a handle for a spring. If you want to later remove\n     * spring pass it to removeSpring() method.\n     */\n    addSpring: function (body1, body2, springLength, springCoefficient) {\n      if (!body1 || !body2) {\n        throw new Error('Cannot add null spring to force simulator');\n      }\n\n      if (typeof springLength !== 'number') {\n        springLength = -1; // assume global configuration\n      }\n\n      var spring = new Spring(body1, body2, springLength, springCoefficient >= 0 ? springCoefficient : -1);\n      springs.push(spring);\n\n      // TODO: could mark simulator as dirty.\n      return spring;\n    },\n\n    /**\n     * Returns amount of movement performed on last step() call\n     */\n    getTotalMovement: function () {\n      return totalMovement;\n    },\n\n    /**\n     * Removes spring from the system\n     *\n     * @param {Object} spring to remove. Spring is an object returned by addSpring\n     *\n     * @returns {Boolean} true if spring found and removed. falsy otherwise;\n     */\n    removeSpring: function (spring) {\n      if (!spring) { return; }\n      var idx = springs.indexOf(spring);\n      if (idx > -1) {\n        springs.splice(idx, 1);\n        return true;\n      }\n    },\n\n    getBestNewBodyPosition: function (neighbors) {\n      return bounds.getBestNewPosition(neighbors);\n    },\n\n    /**\n     * Returns bounding box which covers all bodies\n     */\n    getBBox: getBoundingBox, \n    getBoundingBox: getBoundingBox, \n\n    invalidateBBox: function () {\n      console.warn('invalidateBBox() is deprecated, bounds always recomputed on `getBBox()` call');\n    },\n\n    gravity: function (value) {\n      if (value !== undefined) {\n        settings.gravity = value;\n        quadTree.options({gravity: value});\n        return this;\n      } else {\n        return settings.gravity;\n      }\n    },\n\n    theta: function (value) {\n      if (value !== undefined) {\n        settings.theta = value;\n        quadTree.options({theta: value});\n        return this;\n      } else {\n        return settings.theta;\n      }\n    }\n  };\n\n  // allow settings modification via public API:\n  expose(settings, publicApi);\n\n  eventify(publicApi);\n\n  return publicApi;\n\n  function getBoundingBox() {\n    bounds.update();\n    return bounds.box;\n  }\n\n  function addForce(forceName, forceFunction) {\n    if (forceMap.has(forceName)) throw new Error('Force ' + forceName + ' is already added');\n\n    forceMap.set(forceName, forceFunction);\n    forces.push(forceFunction)\n  }\n\n  function removeForce(forceName) {\n    var forceIndex = forces.indexOf(forceMap.get(forceName))\n    if (forceIndex < 0) return;\n    forces.splice(forceIndex, 1);\n  }\n\n  function getForces() {\n    // TODO: Should I trust them or clone the forces?\n    return forceMap;\n  }\n\n  function nbodyForce(iterationUmber) {\n    if (bodies.length === 0) return;\n\n    quadTree.insertBodies(bodies);\n    var i = bodies.length;\n    while (i--) {\n      var body = bodies[i];\n      if (!body.isPinned) {\n        body.reset();\n        quadTree.updateBodyForce(body);\n        dragForce.update(body);\n      }\n    }\n  }\n\n  function updateSpringForce() {\n    var i = springs.length;\n    while (i--) {\n      springForce.update(springs[i]);\n    }\n  }\n\n  function expose(settings, target) {\n    for (var key in settings) {\n      augment(settings, target, key);\n    }\n  }\n\n  function augment(source, target, key) {\n    if (!source.hasOwnProperty(key)) return\n    if (typeof target[key] === 'function') {\n      // this accessor is already defined. Ignore it\n      return;\n    }\n    var sourceIsNumber = Number.isFinite(source[key]);\n\n    if (sourceIsNumber) {\n      target[key] = function (value) {\n        if (value !== undefined) {\n          if (!Number.isFinite(value)) throw new Error('Value of ' + key + ' should be a valid number.');\n          source[key] = value;\n          return target;\n        }\n        return source[key];\n      }\n    } else {\n      target[key] = function (value) {\n        if (value !== undefined) {\n          source[key] = value;\n          return target;\n        }\n        return source[key];\n      }\n    }\n  }\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","createPhysicsSimulator","settings","getBoundingBox","bounds","update","box","addForce","forceName","forceFunction","forceMap","has","Error","set","forces","push","augment","source","target","key","hasOwnProperty","Number","sourceIsNumber","isFinite","value","undefined","Spring","merge","eventify","springCoeff","dragCoeff","springLength","springCoefficient","gravity","theta","dragCoefficient","timeStep","adaptiveTimeStepWeight","dimensions","debug","factory","dimensionalCache","Body","generateCreateBodyFunction","createQuadTree","generateQuadTreeFunction","createBounds","generateBoundsFunction","createDragForce","generateCreateDragForceFunction","createSpringForce","generateCreateSpringForceFunction","integrate","generateIntegratorFunction","random","bodies","springs","quadTree","springForce","dragForce","Map","iterationNumber","nbodyForce","iterationUmber","length","insertBodies","i","body","isPinned","reset","updateBodyForce","updateSpringForce","publicApi","removeForce","forceIndex","indexOf","get","splice","getForces","step","movement","addBody","addBodyAt","pos","removeBody","idx","addSpring","body1","body2","spring","getTotalMovement","totalMovement","removeSpring","getBestNewBodyPosition","neighbors","getBestNewPosition","getBBox","invalidateBBox","console","warn","options","expose"]
}
