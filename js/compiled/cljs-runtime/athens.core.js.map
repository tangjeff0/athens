{"version":3,"sources":["athens/core.cljs"],"mappings":";;;;AAuBA;;;AAAA,AAAAA,AAAA,AAAA,AAAaC;AAGb,AAAA,AAAMC;AAAN,AAEE,AAAMC;AAAN,AACE,AAAA,AAACC;;AADH;;;AAIF,AAAA,AAAuBC;AAAvB,AAEE,AAACC;;AACD,AAACC;;AACD,AAAA,AAACC,AAAcC,AACD,AAAA,AAACC;;AAGjB;;;AAAA,AAAMC;AAAN,AAGE,AAAA,AAACC,AAAW,AAAA,AAACC;;AAgBf;;;;AAAA,AAAMC;AAAN,AAIE,AAAMC,AAAkB,AAAKC,AAASC,AAAQC,AAAQC,AAAOC;AAArC,AACE,AAACC,AAAS,AAAA,AAAA,AAAA,AAAA,AAAA,AAAgBL,AAAoBC,AAAmBC,AAAkBC,AAAiBC;;;AAGhI,AAAA,AAAME;AAAN,AAEE,AAAM,AAACC;AAAP,AACE,AAAMC,AAAkB,AAAI,AAAA,AAACC;AACvBC,AAAkB,AAAA,AAAA,AAAWF;AADnC,AAEE,AAAME;AAAN,AACE,AAAM,AAAA,AAACC;AAAP,AACE,AAAA,AAAWH;;AADb;;;AADF;;;AAHJ;;;AAQF,AAAA,AAAMI;AAAN,AAEE,AAACd;;AAED,AAACQ;;AACD,AAACO;;AACD,AAAA,AAACC,AAAmBC;;AACpB,AAACC;;AACD,AAAI,AAACT;AACH,AAAA,AAAA,AAACU;;AACD,AAAA,AAAA,AAACA;;;AACH,AAAC/B;;AACD,AAACG","names":["js/goog.define","athens.core/SENTRY_DSN","athens.core/dev-setup","athens.config/debug?","cljs.core.println","athens.core/mount-root","re-frame.core/clear-subscription-cache!","athens.router/init-routes!","reagent.dom.render","athens.views/main-panel","goog.dom/getElement","athens.core/sentry-on?","cljs.core.not_EQ_","js/localStorage.getItem","athens.core/set-global-alert!","js/window.onerror","message","source","lineno","colno","error","js/alert","athens.core/init-ipcRenderer","athens.util/electron?","ipcRenderer","js/require","update-available?","js/window.confirm","athens.core/init","athens.style/init","stylefy.core/tag","athens.style/app-styles","athens.listeners/init","re-frame.core/dispatch-sync"],"sourcesContent":["(ns athens.core\n  (:require\n    [\"@sentry/integrations\" :as integrations]\n    [\"@sentry/react\" :as Sentry]\n    [\"@sentry/tracing\" :as tracing]\n    [athens.coeffects]\n    [athens.config :as config]\n    [athens.effects]\n    [athens.electron]\n    [athens.events]\n    [athens.listeners :as listeners]\n    [athens.router :as router]\n    [athens.style :as style]\n    [athens.subs]\n    [athens.util :as util]\n    [athens.views :as views]\n    ;;[athens.ws]\n    [goog.dom :refer [getElement]]\n    [re-frame.core :as rf]\n    [reagent.dom :as r-dom]\n    [stylefy.core :as stylefy]))\n\n\n(goog-define SENTRY_DSN \"\")\n\n\n(defn dev-setup\n  []\n  (when config/debug?\n    (println \"dev mode\")))\n\n\n(defn ^:dev/after-load mount-root\n  []\n  (rf/clear-subscription-cache!)\n  (router/init-routes!)\n  (r-dom/render [views/main-panel]\n                (getElement \"app\")))\n\n\n(defn sentry-on?\n  \"Checks localStorage to see if sentry is on. Sentry is disabled/enabled in settings along with Posthog.\"\n  []\n  (not= \"off\" (js/localStorage.getItem \"sentry\")))\n\n\n;;(defn init-sentry\n;;  \"Two checks for sentry: once on init and once on beforeSend.\"\n;;  []\n;;  (when (sentry-on?)\n;;    (.init Sentry (clj->js {:dsn SENTRY_DSN\n;;                            :release          (str \"athens@\" (util/athens-version))\n;;                            :integrations     [(new (.. tracing -Integrations -BrowserTracing))\n;;                                               (new (.. integrations -CaptureConsole) (clj->js {:levels [\"warn\" \"error\" \"debug\" \"assert\"]}))]\n;;                            :environment      (if config/debug? \"development\" \"production\")\n;;                            :beforeSend       #(when (sentry-on?) %)\n;;                            :tracesSampleRate 1.0}))))\n\n\n(defn set-global-alert!\n  \"Alerts user if there's an uncaught error.\n  https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror \"\n  []\n  (set! js/window.onerror (fn [message, source, lineno, colno, error]\n                            (js/alert (str \"message=\" message \"\\nsource=\" source \"\\nlineno=\" lineno \"\\ncolno=\" colno \"\\nerror=\" error)))))\n\n\n(defn init-ipcRenderer\n  []\n  (when (util/electron?)\n    (let [ipcRenderer       (.. (js/require \"electron\") -ipcRenderer)\n          update-available? (.sendSync ipcRenderer \"check-update\" \"renderer\")]\n      (when update-available?\n        (when (js/window.confirm \"Update available. Would you like to update and restart to the latest version?\")\n          (.sendSync ipcRenderer \"confirm-update\"))))))\n\n\n(defn init\n  []\n  (set-global-alert!)\n  ;;(init-sentry)\n  (init-ipcRenderer)\n  (style/init)\n  (stylefy/tag \"body\" style/app-styles)\n  (listeners/init)\n  (if (util/electron?)\n    (rf/dispatch-sync [:boot/desktop])\n    (rf/dispatch-sync [:boot/web]))\n  (dev-setup)\n  (mount-root))\n"]}