{
"version":3,
"file":"module$node_modules$ngraph_DOT_forcelayout$lib$codeGenerators$generateCreateSpringForce.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAe,uFAAf,CAA4G,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAWpJC,QAASA,sCAAqC,CAACC,SAAD,CAAY,CACpDC,SAAAA,CAAUC,oBAAA,CAAqBF,SAArB,CAkCd,OAjCW,ydAiCX;AArBMC,SAAA,CAAQ,oDAAR,CAA2D,CAACE,OAAQ,CAAT,CAA3D,CAqBN,CAjCW,+BAiCX,CApBwBF,SAAA,CAAQ,iBAAR,CAA2B,CAACG,KAAM,KAAP,CAA3B,CAoBxB,CAjCW,+CAiCX,CAjBQH,SAAA,CAAQ,+CAAR,CAAsD,CAACE,OAAQ,CAAT,CAAtD,CAiBR,CAjCW,6BAiCX,CAhBsBF,SAAA,CAAQ,iBAAR,CAA2B,CAACG,KAAM,KAAP,CAA3B,CAgBtB,CAjCW,2KAiCX;AAVMH,SAAA,CAAQ,8CAAR,CAAqD,CAACE,OAAQ,CAAT,CAArD,CAUN,CAjCW,kFAiCX,CANMF,SAAA,CAAQ,8CAAR,CAAqD,CAACE,OAAQ,CAAT,CAArD,CAMN,CAjCW,uFAF6C,CAV1D,IAAMD,qBAAuBN,OAAA,CAAQ,oFAAR,CAE7BC,OAAA,CAAOC,OAAP,CAGAO,QAA0C,CAACL,SAAD,CAAY,CAChDM,SAAAA,CAAOP,qCAAA,CAAsCC,SAAtC,CACX;MAAO,KAAIO,QAAJ,CAAa,SAAb,CAAwB,QAAxB,CAAkCD,SAAlC,CAF6C,CAFtDT,OAAA,CAAOC,OAAP,CAAeC,qCAAf,CAAuDA,qCAJ6F;",
"sources":["node_modules/ngraph_DOT_forcelayout/lib/codeGenerators/generateCreateSpringForce.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ngraph_DOT_forcelayout$lib$codeGenerators$generateCreateSpringForce\"] = function(global,require,module,exports) {\nconst createPatternBuilder = require('./createPatternBuilder');\n\nmodule.exports = generateCreateSpringForceFunction;\nmodule.exports.generateCreateSpringForceFunctionBody = generateCreateSpringForceFunctionBody;\n\nfunction generateCreateSpringForceFunction(dimension) {\n  let code = generateCreateSpringForceFunctionBody(dimension);\n  return new Function('options', 'random', code);\n}\n\nfunction generateCreateSpringForceFunctionBody(dimension) {\n  let pattern = createPatternBuilder(dimension);\n  let code = `\n  if (!Number.isFinite(options.springCoefficient)) throw new Error('Spring coefficient is not a number');\n  if (!Number.isFinite(options.springLength)) throw new Error('Spring length is not a number');\n\n  return {\n    /**\n     * Updates forces acting on a spring\n     */\n    update: function (spring) {\n      var body1 = spring.from;\n      var body2 = spring.to;\n      var length = spring.length < 0 ? options.springLength : spring.length;\n      ${pattern('var d{var} = body2.pos.{var} - body1.pos.{var};', {indent: 6})}\n      var r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n\n      if (r === 0) {\n        ${pattern('d{var} = (random.nextDouble() - 0.5) / 50;', {indent: 8})}\n        r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n      }\n\n      var d = r - length;\n      var coefficient = ((spring.coefficient > 0) ? spring.coefficient : options.springCoefficient) * d / r;\n\n      ${pattern('body1.force.{var} += coefficient * d{var}', {indent: 6})};\n      body1.springCount += 1;\n      body1.springLength += r;\n\n      ${pattern('body2.force.{var} -= coefficient * d{var}', {indent: 6})};\n      body2.springCount += 1;\n      body2.springLength += r;\n    }\n  };\n`\n  return code;\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","generateCreateSpringForceFunctionBody","dimension","pattern","createPatternBuilder","indent","join","generateCreateSpringForceFunction","code","Function"]
}
