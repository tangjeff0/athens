shadow$provide.module$node_modules$ngraph_DOT_forcelayout$lib$codeGenerators$generateBounds=function(global,require,module,exports){function generateBoundsFunctionBody(dimension){dimension=createPatternBuilder(dimension);return"\n  var boundingBox \x3d {\n    "+dimension("min_{var}: 0, max_{var}: 0,",{indent:4})+"\n  };\n\n  return {\n    box: boundingBox,\n\n    update: updateBoundingBox,\n\n    reset: resetBoundingBox,\n\n    getBestNewPosition: function (neighbors) {\n      var "+dimension("base_{var} \x3d 0",
{join:", "})+";\n\n      if (neighbors.length) {\n        for (var i \x3d 0; i \x3c neighbors.length; ++i) {\n          let neighborPos \x3d neighbors[i].pos;\n          "+dimension("base_{var} +\x3d neighborPos.{var};",{indent:10})+"\n        }\n\n        "+dimension("base_{var} /\x3d neighbors.length;",{indent:8})+"\n      } else {\n        "+dimension("base_{var} \x3d (boundingBox.min_{var} + boundingBox.max_{var}) / 2;",{indent:8})+"\n      }\n\n      var springLength \x3d settings.springLength;\n      return {\n        "+
dimension("{var}: base_{var} + (random.nextDouble() - 0.5) * springLength,",{indent:8})+"\n      };\n    }\n  };\n\n  function updateBoundingBox() {\n    var i \x3d bodies.length;\n    if (i \x3d\x3d\x3d 0) return; // No bodies - no borders.\n\n    "+dimension("var max_{var} \x3d Number.MIN_VALUE;",{indent:4})+"\n    "+dimension("var min_{var} \x3d Number.MAX_VALUE;",{indent:4})+"\n\n    while(i--) {\n      // this is O(n), it could be done faster with quadtree, if we check the root node bounds\n      var bodyPos \x3d bodies[i].pos;\n      "+
dimension("if (bodyPos.{var} \x3c min_{var}) min_{var} \x3d bodyPos.{var};",{indent:6})+"\n      "+dimension("if (bodyPos.{var} \x3e max_{var}) max_{var} \x3d bodyPos.{var};",{indent:6})+"\n    }\n\n    "+dimension("boundingBox.min_{var} \x3d min_{var};",{indent:4})+"\n    "+dimension("boundingBox.max_{var} \x3d max_{var};",{indent:4})+"\n  }\n\n  function resetBoundingBox() {\n    "+dimension("boundingBox.min_{var} \x3d boundingBox.max_{var} \x3d 0;",{indent:4})+"\n  }\n"}module.exports=function(dimension){dimension=
generateBoundsFunctionBody(dimension);return new Function("bodies","settings","random",dimension)};module.exports.generateFunctionBody=generateBoundsFunctionBody;var createPatternBuilder=require("module$node_modules$ngraph_DOT_forcelayout$lib$codeGenerators$createPatternBuilder")}
//# sourceMappingURL=module$node_modules$ngraph_DOT_forcelayout$lib$codeGenerators$generateBounds.js.map
