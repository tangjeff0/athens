{"version":3,"sources":["athens/parser.cljc"],"mappingsoEX;;;;AAAA,AAAMC,AAGHC;AAHH,AAIE,AAACC,AACC,AAAKC,AAAgBC;AAArB,AACE,AAAI,AAAK,AAASA,AAAM,AAAS,AAACC,AAAKF;AACrC,AAAMG,AAAkB,AAACC,AAAIJ;AACvBK,AAAqB,AAAK,AAACH,AAAKF,AAAiBC;AADvD,AAEE,AAACK,AAAKH,AAAkBE;;AAC1B,AAACC,AAAKN,AAAgBC;;AAN5B,AAQEH;;AAGJ;;;AAAA,AAAMS,AAEHC;AAFH,AAGE,AAAAC,AAAA,AAAA,AAC2B;AAAOG;AAAP,AAEE,AAAA,AAAA,AAACC,AAAc,AAAChB,AAAyBe;;;AAFpCA;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AADlC,AAI2B,AAAAE,AAAqBI;AAArB,AAAA,AAAAH,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAME;AAAN,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAACJ,AAAuBK,AAASD;AAL9D,AAM2B,AAAKA,AAAcC;AAAnB,AACE,AAAA,AAAA,AAAA,AAAA,AAACL,AAAsBK,AAAMD;AAP1D,AAQ2B,AAAKC;AAAL,AAAA,AAAA,AAAA,AAAA,AACmBA,AAAKA;AATnD,AAU2B;AAAON;AAAP,AACE,AAACf,AAAyBe;;;AADrBA;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AAVlC,AAY2B;AAAOO;AAAP,AACE,AAACC,AAAYD;;;AADRA;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AAZlC,AAc2B;AAAOA;AAAP,AACE,AAACC,AAAYD;;;AADRA;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AAdlC,AAgB2B,AAAKE;AAAL,AACE,AAAA,AAAA,AAACR,AAAiBQ,AAAoB,AAACC,AAAK,AAAC1B,AAAAA,AAAAA,AAAayB,AAAAA;;AAjBvFX,AAkBEF;AAlBF,AAAA,AAAAC,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;;AAqBH;;;AAAA,AAAMY,AAEHC;AAFH,AAGE,AAACjB,AAAiB,AAACX,AAAAA,AAAAA,AAAa4B,AAAAA","names":["instaparse.core/map->Parser","instaparse.core.parser","cljs.core.merge","instaparse.combinators-source/regexp","cljs.core/List","athens.parser/block-parser","athens.parser/combine-adjacent-strings","coll","cljs.core.reduce","elements-so-far","elmt","cljs.core/peek","previous-elements","cljs.core/pop","combined-last-string","cljs.core.conj","athens.parser/transform-to-ast","tree","G__48625","G__48626","instaparse.core/transform","raw-contents","cljs.core.into","p__48627","vec__48628","cljs.core.nth","text-contents","url","chars","clojure.string.join","raw-content-string","cljs.core/rest","athens.parser/parse-to-ast","string"],"sourcesContent":["(ns athens.parser\n  (:require\n    [clojure.string :as string]\n    #?(:cljs [instaparse.core :as insta :refer-macros [defparser]]\n       :clj  [instaparse.core :as insta :refer [defparser]])))\n\n\n(declare block-parser)\n\n\n;; Instaparse docs: https://github.com/Engelberg/instaparse#readme\n;; Main parser documentation: `doc/parser.md` in this repository\n\n(defparser block-parser\n  \"(* Welcome to the Athens Block Parser! *)\n   (* We're currently building a more robust + performant one, so if you have any idea *)\n   (* regarding how to implement it better, feel free to open an issue and lend us a hand! :) *)\n   (* Currently, this is implemented similar to a LL(1) parser, which should keep its performance levels at O(n). *)\n   \n   (* This first rule is the top-level one. *)\n   (* `/` ordered alternation is used to, for example, try to interpret a string beginning with '[[' as a page-link before interpreting it as raw characters. *)\n   block = (url-raw / non-reserved-chars / pre-formatted / syntax-in-block / reserved-char) *\n\n   (* The following regular expression expresses this: (any character except '`') <- This repeated as many times as possible *)\n   <any-non-pre-formatted-chars> = #'[^\\\\`]*'\n   pre-formatted = block-pre-formatted | inline-pre-formatted\n   <block-pre-formatted> = <'```'> any-non-pre-formatted-chars <'```'>\n   <inline-pre-formatted> = <'`'> any-non-pre-formatted-chars <'`'>\n   \n   (* Because code blocks are pre-formatted, we process them before these applied syntaxes. *)\n   <syntax-in-block> = (component | page-link | block-ref | hashtag | url-image | url-link | bold)\n   \n   <syntax-in-component> = (page-link | block-ref)\n   <any-non-component-reserved-chars> = #'[^\\\\{\\\\}]*'\n   component = <'{{'> any-non-component-reserved-chars <'}}'>\n   \n   (* The following regular expression expresses this: (any character except '[' or ']') <- This repeated as many times as possible *)\n   <any-non-page-link-chars> = #'[^\\\\[\\\\]]*'\n   <page-link-content> = (any-non-page-link-chars | page-link)*\n   page-link = <'[['> page-link-content <']]'>\n   \n   (* A block reference could only be letters, numbers, and lower and regular dash. *)\n   block-ref = <'(('> #'[a-zA-Z0-9_\\\\-]+' <'))'>\n   \n   hashtag = hashtag-bare | hashtag-delimited\n   <hashtag-bare> = <'#'> #'[^\\\\ \\\\+\\\\!\\\\@\\\\#\\\\$\\\\%\\\\^\\\\&\\\\*\\\\(\\\\)\\\\?\\\\\\\"\\\\;\\\\:\\\\]\\\\[]+'  (* Unicode: L = letters, M = combining marks, N = numbers *)\n   <hashtag-delimited> = <'#'> <'[['> page-link-content <']]'>\n\n   url-raw = #'(?i)\\\\b(?:(?:https?|ftp)://)(?:\\\\S+(?::\\\\S*)?@)?(?:(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\\\\.?)(?::\\\\d{2,5})?(?:[/?#]\\\\S*)?\\\\b'\n   url-image = <'!'> url-link-text url-link-url\n   \n   url-link = url-link-text url-link-url\n   <url-link-text> = <'['> url-link-text-contents <']'>\n   url-link-text-contents = ( (bold | backslash-escaped-right-bracket) / any-char )*\n   <backslash-escaped-right-bracket> = <'\\\\\\\\'> ']'\n   <url-link-url> = <'('> url-link-url-parts <')'>\n   url-link-url-parts = url-link-url-part+\n   <url-link-url-part> = (backslash-escaped-paren | '(' url-link-url-part* ')') / any-char\n   <backslash-escaped-paren> = <'\\\\\\\\'> ('(' | ')')\n   \n   (* The following regular expression expresses this: (any character except '*') <- This repeated as many times as possible *)\n   <non-bold-chars> = #'[^\\\\*]*'\n   bold = <'**'> non-bold-chars <'**'>\n   \n   (* -- It\u2019s useful to extract this rule because its transform joins the individual characters everywhere it\u2019s used. *)\n   (* -- However, I think in many cases a more specific rule can be used. So we will migrate away from uses of this rule. *)\n   \n   (* Here are a list of 'stop characters' we implemented, to get the LL(1) performance. *)\n   (* The current reserved characters are:  ->  ( [ * < ` {  # ! <- *)\n   (* Note that since our grammar is a left-recursive one, we only use the opening chars in the pair. *)\n   (* IMPORTANT: if you are adding new reserved characters to the list, remember to change them all in the following regex & update the list above! *)\n   (* Regex could be a thinker at times, but you can use this tool https://regex101.com/ for a visual debugging experience. *)\n   <non-reserved-char> =  #'[^\\\\(\\\\[\\\\*\\\\<\\\\`\\\\{\\\\#\\\\!]'\n   <reserved-char> =       #'[\\\\(\\\\[\\\\*\\\\<\\\\`\\\\{\\\\#\\\\!]'\n   <non-reserved-chars> = #'[^\\\\(\\\\[\\\\*\\\\<\\\\`\\\\{\\\\#\\\\!]*'\n   <any-char> = #'\\\\w|\\\\W'\n   <any-chars> = #'[\\\\w|\\\\W]+'\n   \n   \")\n\n\n(defn combine-adjacent-strings\n  \"In a sequence of strings mixed with other values, returns the same sequence with adjacent strings concatenated.\n   (If the sequence contains only strings, use clojure.string/join instead.)\"\n  [coll]\n  (reduce\n    (fn [elements-so-far elmt]\n      (if (and (string? elmt) (string? (peek elements-so-far)))\n        (let [previous-elements (pop elements-so-far)\n              combined-last-string (str (peek elements-so-far) elmt)]\n          (conj previous-elements combined-last-string))\n        (conj elements-so-far elmt)))\n    []\n    coll))\n\n\n(defn transform-to-ast\n  \"Transforms the Instaparse output tree to an abstract syntax tree for Athens markup.\"\n  [tree]\n  (insta/transform\n    {:block                  (fn [& raw-contents]\n                                ;; use combine-adjacent-strings to collapse individual characters from any-char into one string\n                               (into [:block] (combine-adjacent-strings raw-contents)))\n     :url-image              (fn [[text-contents] url]\n                               (into [:url-image {:url url :alt text-contents}]))\n     :url-link               (fn [text-contents url]\n                               (into [:url-link {:url url}] text-contents))\n     :url-raw                (fn [url]\n                               [:url-link {:url url} url])\n     :url-link-text-contents (fn [& raw-contents]\n                               (combine-adjacent-strings raw-contents))\n     :url-link-url-parts     (fn [& chars]\n                               (string/join chars))\n     :any-chars              (fn [& chars]\n                               (string/join chars))\n     :component              (fn [raw-content-string]\n                               (into [:component raw-content-string] (rest (block-parser raw-content-string))))}\n    tree))\n\n\n(defn parse-to-ast\n  \"Converts a string of block syntax to an abstract syntax tree for Athens markup.\"\n  [string]\n  (transform-to-ast (block-parser string)))\n"]}