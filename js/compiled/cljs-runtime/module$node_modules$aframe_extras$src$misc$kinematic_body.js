shadow$provide.module$node_modules$aframe_extras$src$misc$kinematic_body=function(global,require,module,exports){module.exports=AFRAME.registerComponent("kinematic-body",{dependencies:["velocity"],schema:{mass:{default:5},radius:{default:1.3},linearDamping:{default:.05},enableSlopes:{default:!0},enableJumps:{default:!1}},init:function(){this.system=this.el.sceneEl.systems.physics;this.system.addComponent(this);var el=this.el,data=this.data,position=(new CANNON.Vec3).copy(el.object3D.getWorldPosition(new THREE.Vector3));
this.body=new CANNON.Body({material:this.system.getMaterial("staticMaterial"),position:position,mass:data.mass,linearDamping:data.linearDamping,fixedRotation:!0});this.body.addShape(new CANNON.Sphere(data.radius),new CANNON.Vec3(0,data.radius,0));this.body.el=this.el;this.el.body=this.body;this.system.addBody(this.body);el.hasAttribute("wasd-controls")&&console.warn("[kinematic-body] Not compatible with wasd-controls, use movement-controls.")},remove:function(){this.system.removeBody(this.body);this.system.removeComponent(this);
delete this.el.body},beforeStep:function(t,dt){dt&&(t=this.el,dt=this.body,this.data.enableJumps||dt.velocity.set(0,0,0),dt.position.copy(t.getAttribute("position")))},step:function(){var velocity=new THREE.Vector3,normalizedVelocity=new THREE.Vector3,currentSurfaceNormal=new THREE.Vector3,groundNormal=new THREE.Vector3;return function(t,dt){if(dt){t=this.body;var data=this.data,didCollide,groundHeight=-Infinity,contacts=this.system.getContacts();dt=Math.min(dt,1E3*this.system.data.maxInterval);groundNormal.set(0,
0,0);velocity.copy(this.el.getAttribute("velocity"));t.velocity.copy(velocity);for(var i=0,contact;contact=contacts[i];i++)if(contact.enabled){if(t.id===contact.bi.id)contact.ni.negate(currentSurfaceNormal);else if(t.id===contact.bj.id)currentSurfaceNormal.copy(contact.ni);else continue;if((didCollide=-1E-6>t.velocity.dot(currentSurfaceNormal))&&.5>=currentSurfaceNormal.y)velocity.projectOnPlane(currentSurfaceNormal);else if(.5<currentSurfaceNormal.y&&(didCollide=t.id===contact.bi.id?Math.abs(contact.rj.y+
contact.bj.position.y):Math.abs(contact.ri.y+contact.bi.position.y),didCollide>groundHeight)){groundHeight=didCollide;groundNormal.copy(currentSurfaceNormal);var groundBody=t.id===contact.bi.id?contact.bj:contact.bi}}normalizedVelocity.copy(velocity).normalize();groundBody&&(!data.enableJumps||.5>normalizedVelocity.y)?(data.enableSlopes?.999999>groundNormal.y&&groundNormal.copy(this.raycastToGround(groundBody,groundNormal)):groundNormal.set(0,1,0),velocity.projectOnPlane(groundNormal)):this.system.driver.world&&
velocity.add(this.system.driver.world.gravity.scale(4*dt/1E3));t.velocity.copy(velocity);this.el.setAttribute("velocity",t.velocity);this.el.setAttribute("position",t.position)}}}(),raycastToGround:function(groundBody,groundNormal){var ray=this.body.position;var vTo=this.body.position.clone();ray=new CANNON.Ray(ray,vTo);ray._updateDirection();ray.intersectBody(groundBody);if(!ray.hasHit)return groundNormal;groundBody=ray.result.hitNormalWorld;return Math.abs(groundBody.y)>Math.abs(groundNormal.y)?
groundBody:groundNormal}})}
//# sourceMappingURL=module$node_modules$aframe_extras$src$misc$kinematic_body.js.map
