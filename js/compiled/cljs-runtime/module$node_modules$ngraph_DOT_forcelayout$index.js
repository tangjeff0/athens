shadow$provide.module$node_modules$ngraph_DOT_forcelayout$index=function(global,require,module,exports){function noop(){}module.exports=function(graph,physicsSettings){function forEachBody(cb){nodeBodies.forEach(function(body,bodyId){cb(body,bodyId)})}function onGraphChanged(changes){for(var i=0;i<changes.length;++i){var change=changes[i];if("add"===change.changeType)change.node&&initBody(change.node.id),change.link&&initLink(change.link);else if("remove"===change.changeType){if(change.node){var nodeId=
change.node.id,body=nodeBodies.get(nodeId);body&&(nodeBodies.delete(nodeId),physicsSimulator.removeBody(body))}if(change.link&&(change=change.link,nodeId=springs[change.id])){body=graph.getNode(change.fromId);var to=graph.getNode(change.toId);body&&updateBodyMass(body.id);to&&updateBodyMass(to.id);delete springs[change.id];physicsSimulator.removeSpring(nodeId)}}}bodiesCount=graph.getNodesCount()}function initBody(nodeId){var body=nodeBodies.get(nodeId);if(!body){var node=graph.getNode(nodeId);if(!node)throw Error("initBody() was called with unknown node id");
body=node.position;if(!body){body=[];if(node.links)for(var maxNeighbors=Math.min(node.links.length,2),i=0;i<maxNeighbors;++i){var link=node.links[i];(link=link.fromId!==node.id?nodeBodies.get(link.fromId):nodeBodies.get(link.toId))&&link.pos&&body.push(link)}body=physicsSimulator.getBestNewBodyPosition(body)}body=physicsSimulator.addBodyAt(body);body.id=nodeId;nodeBodies.set(nodeId,body);updateBodyMass(nodeId);node&&(node.isPinned||node.data&&node.data.isPinned)&&(body.isPinned=!0)}}function initLink(link){updateBodyMass(link.fromId);
updateBodyMass(link.toId);var fromBody=nodeBodies.get(link.fromId),toBody=nodeBodies.get(link.toId);fromBody=physicsSimulator.addSpring(fromBody,toBody,link.length);springTransform(link,fromBody);springs[link.id]=fromBody}function updateBodyMass(nodeId){var body=nodeBodies.get(nodeId);body.mass=nodeMass(nodeId);if(Number.isNaN(body.mass))throw Error("Node mass should be a number");}function getInitializedBody(nodeId){var body=nodeBodies.get(nodeId);body||(initBody(nodeId),body=nodeBodies.get(nodeId));
return body}if(!graph)throw Error("Graph structure cannot be undefined");var physicsSimulator=(physicsSettings&&physicsSettings.createSimulator||require("module$node_modules$ngraph_DOT_forcelayout$lib$createPhysicsSimulator"))(physicsSettings);if(Array.isArray(physicsSettings))throw Error("Physics settings is expected to be an object");var nodeMass=function(nodeId){return(nodeId=graph.getLinks(nodeId))?1+nodeId.length/3:1};physicsSettings&&"function"===typeof physicsSettings.nodeMass&&(nodeMass=physicsSettings.nodeMass);
var nodeBodies=new Map,springs={},bodiesCount=0,springTransform=physicsSimulator.settings.springTransform||noop;(function(){bodiesCount=0;graph.forEachNode(function(node){initBody(node.id);bodiesCount+=1});graph.forEachLink(initLink)})();graph.on("changed",onGraphChanged);var wasStable=!1,api={step:function(){if(0===bodiesCount)return!0!==wasStable&&(wasStable=!0,api.fire("stable",!0)),!0;var lastMove=physicsSimulator.step();api.lastMove=lastMove;api.fire("step");lastMove=.01>=lastMove/bodiesCount;
wasStable!==lastMove&&(wasStable=lastMove,api.fire("stable",lastMove));return lastMove},getNodePosition:function(nodeId){return getInitializedBody(nodeId).pos},setNodePosition:function(nodeId){var body=getInitializedBody(nodeId);body.setPosition.apply(body,Array.prototype.slice.call(arguments,1))},getLinkPosition:function(linkId){if(linkId=springs[linkId])return{from:linkId.from.pos,to:linkId.to.pos}},getGraphRect:function(){return physicsSimulator.getBBox()},forEachBody:forEachBody,pinNode:function(node,
isPinned){getInitializedBody(node.id).isPinned=!!isPinned},isNodePinned:function(node){return getInitializedBody(node.id).isPinned},dispose:function(){graph.off("changed",onGraphChanged);api.fire("disposed")},getBody:function(nodeId){return nodeBodies.get(nodeId)},getSpring:function(fromId,toId){if(void 0===toId)fromId="object"!==typeof fromId?fromId:fromId.id;else{fromId=graph.hasLink(fromId,toId);if(!fromId)return;fromId=fromId.id}return springs[fromId]},getForceVectorLength:function(){var fx=0,
fy=0;forEachBody(function(body){fx+=Math.abs(body.force.x);fy+=Math.abs(body.force.y)});return Math.sqrt(fx*fx+fy*fy)},simulator:physicsSimulator,graph:graph,lastMove:0};eventify(api);return api};module.exports.simulator=require("module$node_modules$ngraph_DOT_forcelayout$lib$createPhysicsSimulator");var eventify=require("module$node_modules$ngraph_DOT_events$index")}
//# sourceMappingURL=module$node_modules$ngraph_DOT_forcelayout$index.js.map
