{"version":3,"sources":["athens/components.cljs"],"mappings":";AAOA,AAAA,AAAMA,AACHC,AAAIC,AAASC;AADhB,AAEE,AAAMC,AAAsB,AAAA,AAAe,AAAA,AAAA,AAACC,AAAyBJ;AAArE,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACK,AAAoCL,AACA,AAACM,AACCH,AACAF,AACAC,AACF,AAACK;;AAG1C,AAAA,AAAA,AAAKC,AACqB,AAAKC,AAAET;AAAP,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAGuB,AAAA,AAAA,AAACD,AAAcC;;AAJhE,AAK0B,AAAKS,AAAET;AAAP,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAGuB,AAAA,AAAA,AAACD,AAAcC;;AARhE,AAS0B,AAAKU,AAAQD;AAAb,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEoB,AAAA,AAAsC,AAAA,AAACE,AAAI,AAAA,AAACC,AAAiCF;AAX3H,AAa0B,AAAKA,AAAQD;AAAb,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEkB,AAAA,AAACG,AAAkBF;AAf/D,AAgB0B,AAAKA,AAAQD;AAAb,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGGC;AAnB7B,AAoB0B,AAAKA,AAAQD;AAAb,AACE,AAAMT,AAAI,AAACa,AAAO,AAAA,AAACD,AAA+BF;AAAlD,AAAA,AAAA,AACOV;;AAGnC,AAAA,AAAMc,AACHJ,AAAQD;AADX,AAAA,AAAA,AAEWC;;AAGX;;;AAAA,AAAMK,AAEHL,AAAQV;AAFX,AAGE,AAAMgB,AAAO,AAACC,AAAK,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAME;AAAN,AAAAD,AAAAD,AAAA,AAAA,AAAcH;AAAd,AACE,AAAM,AAACM,AAAWD,AAAQX;AAA1B,AACEM;;AADF;;AAEFR;AAHnB,AAAA,AAAA,AAAA,AAAA,AAIoB,AAAKe;AAAL,AACE,AAAIA;AACvB,AAAA,AAAA,AAAIP,AACDA,AAAON,AAAQV,AACfc,AAAgBJ,AAAQV","names":["athens.components/todo-on-click","uid","from-str","to-str","current-block-content","athens.db/get-block","re-frame.core/dispatch","clojure.string/replace","athens.util/now-ts","athens.components/components","_","content","cljs.core.get","cljs.core/re-find","cljs.core/second","athens.components/empty-component","athens.components/render-component","render","cljs.core/some","p__61801","vec__61802","cljs.core.nth","pattern","cljs.core/re-matches","e"],"sourcesContent":["(ns athens.components\n  (:require\n    [athens.db :as db]\n    [athens.util :refer [now-ts]]\n    [re-frame.core :refer [dispatch]]))\n\n\n(defn todo-on-click\n  [uid from-str to-str]\n  (let [current-block-content (:block/string (db/get-block [:block/uid uid]))]\n    (dispatch [:transact [{:block/uid    uid\n                           :block/string (clojure.string/replace\n                                           current-block-content\n                                           from-str\n                                           to-str)\n                           :edit/time    (now-ts)}]])))\n\n\n(def components\n  {#\"\\[\\[TODO\\]\\]\"        (fn [_ uid]\n                            [:input {:type      \"checkbox\"\n                                     :checked   false\n                                     :on-change #(todo-on-click uid #\"\\{\\{\\[\\[TODO\\]\\]\\}\\}\" \"{{[[DONE]]}}\")}])\n   #\"\\[\\[DONE\\]\\]\"        (fn [_ uid]\n                            [:input {:type      \"checkbox\"\n                                     :checked   true\n                                     :on-change #(todo-on-click uid #\"\\{\\{\\[\\[DONE\\]\\]\\}\\}\" \"{{[[TODO]]}}\")}])\n   #\"\\[\\[youtube\\]\\]\\:.*\" (fn [content _]\n                            [:div.media-16-9\n                             [:iframe {:src   (str \"https://www.youtube.com/embed/\" (get (re-find #\".*v=([a-zA-Z0-9_\\-]+)\" content) 1))\n                                       :allow \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"}]])\n   #\"iframe\\:.*\"          (fn [content _]\n                            [:div.media-16-9\n                             [:iframe {:src (re-find #\"http.*\" content)}]])\n   #\"SELF\"                (fn [content _]\n                            [:button {:style {:color       \"red\"\n                                              :font-family \"IBM Plex Mono\"}}\n                             content])\n   #\"embed: \\(\\((.*)\\)\\)\" (fn [content _]\n                            (let [uid (second (re-find #\"embed: \\(\\((.*)\\)\\)\" content))]\n                              [:h5 uid]))})\n\n\n(defn empty-component\n  [content _]\n  [:button content])\n\n\n(defn render-component\n  \"Renders a component using its parse tree & its uid.\"\n  [content uid]\n  (let [render (some (fn [[pattern render]]\n                       (when (re-matches pattern content)\n                         render))\n                     components)]\n    [:span {:on-click (fn [e]\n                        (.. e stopPropagation))}\n     (if render\n       [render content uid]\n       [empty-component content uid])]))\n"]}